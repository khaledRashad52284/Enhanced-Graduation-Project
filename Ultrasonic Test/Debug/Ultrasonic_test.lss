
Ultrasonic_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00003958  000039ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800176  00800176  00003b02  2**0
                  ALLOC
  3 .stab         00002904  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118c  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c746  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__vector_6>
      1c:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__vector_7>
      20:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__vector_8>
      24:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 1b 	call	0x361c	; 0x361c <main>
      8a:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidInit>:
#include "DIO_cfg.h"
#include "DIO_priv.h"


void DIO_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	83 ec       	ldi	r24, 0xC3	; 195
     e54:	80 83       	st	Z, r24

}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy,uint8 u8PinValueCpy)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	2b 97       	sbiw	r28, 0x0b	; 11
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	6b 83       	std	Y+3, r22	; 0x03
	
	tenuErrorStatus enuReturnStateLoc = EOK ;
     e74:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	88 30       	cpi	r24, 0x08	; 8
     e7a:	d8 f5       	brcc	.+118    	; 0xef2 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3b 87       	std	Y+11, r19	; 0x0b
     e84:	2a 87       	std	Y+10, r18	; 0x0a
     e86:	8a 85       	ldd	r24, Y+10	; 0x0a
     e88:	9b 85       	ldd	r25, Y+11	; 0x0b
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	31 f0       	breq	.+12     	; 0xe9a <DIO_enuWritePin+0x3e>
     e8e:	2a 85       	ldd	r18, Y+10	; 0x0a
     e90:	3b 85       	ldd	r19, Y+11	; 0x0b
     e92:	21 30       	cpi	r18, 0x01	; 1
     e94:	31 05       	cpc	r19, r1
     e96:	b1 f0       	breq	.+44     	; 0xec4 <DIO_enuWritePin+0x68>
     e98:	29 c0       	rjmp	.+82     	; 0xeec <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_enuWritePin+0x5c>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_enuWritePin+0x58>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	f4 c0       	rjmp	.+488    	; 0x10ac <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
     ec4:	ab e3       	ldi	r26, 0x3B	; 59
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	eb e3       	ldi	r30, 0x3B	; 59
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_enuWritePin+0x86>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_enuWritePin+0x82>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	e0 c0       	rjmp	.+448    	; 0x10ac <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	dd c0       	rjmp	.+442    	; 0x10ac <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 30       	cpi	r24, 0x08	; 8
     ef6:	08 f4       	brcc	.+2      	; 0xefa <DIO_enuWritePin+0x9e>
     ef8:	45 c0       	rjmp	.+138    	; 0xf84 <DIO_enuWritePin+0x128>
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	80 31       	cpi	r24, 0x10	; 16
     efe:	08 f0       	brcs	.+2      	; 0xf02 <DIO_enuWritePin+0xa6>
     f00:	41 c0       	rjmp	.+130    	; 0xf84 <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	39 87       	std	Y+9, r19	; 0x09
     f0a:	28 87       	std	Y+8, r18	; 0x08
     f0c:	88 85       	ldd	r24, Y+8	; 0x08
     f0e:	99 85       	ldd	r25, Y+9	; 0x09
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	31 f0       	breq	.+12     	; 0xf20 <DIO_enuWritePin+0xc4>
     f14:	28 85       	ldd	r18, Y+8	; 0x08
     f16:	39 85       	ldd	r19, Y+9	; 0x09
     f18:	21 30       	cpi	r18, 0x01	; 1
     f1a:	31 05       	cpc	r19, r1
     f1c:	c9 f0       	breq	.+50     	; 0xf50 <DIO_enuWritePin+0xf4>
     f1e:	2f c0       	rjmp	.+94     	; 0xf7e <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8);
     f20:	a8 e3       	ldi	r26, 0x38	; 56
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e8 e3       	ldi	r30, 0x38	; 56
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9c 01       	movw	r18, r24
     f34:	27 70       	andi	r18, 0x07	; 7
     f36:	30 70       	andi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_enuWritePin+0xe8>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_enuWritePin+0xe4>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	ae c0       	rjmp	.+348    	; 0x10ac <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
     f50:	a8 e3       	ldi	r26, 0x38	; 56
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e3       	ldi	r30, 0x38	; 56
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c 01       	movw	r18, r24
     f64:	27 70       	andi	r18, 0x07	; 7
     f66:	30 70       	andi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_enuWritePin+0x118>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_enuWritePin+0x114>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	97 c0       	rjmp	.+302    	; 0x10ac <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	94 c0       	rjmp	.+296    	; 0x10ac <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	80 31       	cpi	r24, 0x10	; 16
     f88:	08 f4       	brcc	.+2      	; 0xf8c <DIO_enuWritePin+0x130>
     f8a:	45 c0       	rjmp	.+138    	; 0x1016 <DIO_enuWritePin+0x1ba>
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	88 31       	cpi	r24, 0x18	; 24
     f90:	08 f0       	brcs	.+2      	; 0xf94 <DIO_enuWritePin+0x138>
     f92:	41 c0       	rjmp	.+130    	; 0x1016 <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3f 83       	std	Y+7, r19	; 0x07
     f9c:	2e 83       	std	Y+6, r18	; 0x06
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <DIO_enuWritePin+0x156>
     fa6:	2e 81       	ldd	r18, Y+6	; 0x06
     fa8:	3f 81       	ldd	r19, Y+7	; 0x07
     faa:	21 30       	cpi	r18, 0x01	; 1
     fac:	31 05       	cpc	r19, r1
     fae:	c9 f0       	breq	.+50     	; 0xfe2 <DIO_enuWritePin+0x186>
     fb0:	2f c0       	rjmp	.+94     	; 0x1010 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%8);
     fb2:	a5 e3       	ldi	r26, 0x35	; 53
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e3       	ldi	r30, 0x35	; 53
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 01       	movw	r18, r24
     fc6:	27 70       	andi	r18, 0x07	; 7
     fc8:	30 70       	andi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_enuWritePin+0x17a>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_enuWritePin+0x176>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	65 c0       	rjmp	.+202    	; 0x10ac <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%8);
     fe2:	a5 e3       	ldi	r26, 0x35	; 53
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e3       	ldi	r30, 0x35	; 53
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9c 01       	movw	r18, r24
     ff6:	27 70       	andi	r18, 0x07	; 7
     ff8:	30 70       	andi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_enuWritePin+0x1aa>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_enuWritePin+0x1a6>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	4e c0       	rjmp	.+156    	; 0x10ac <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	4b c0       	rjmp	.+150    	; 0x10ac <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	88 31       	cpi	r24, 0x18	; 24
    101a:	08 f4       	brcc	.+2      	; 0x101e <DIO_enuWritePin+0x1c2>
    101c:	45 c0       	rjmp	.+138    	; 0x10a8 <DIO_enuWritePin+0x24c>
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	80 32       	cpi	r24, 0x20	; 32
    1022:	08 f0       	brcs	.+2      	; 0x1026 <DIO_enuWritePin+0x1ca>
    1024:	41 c0       	rjmp	.+130    	; 0x10a8 <DIO_enuWritePin+0x24c>
	{
		switch (u8PinValueCpy)
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 83       	std	Y+5, r19	; 0x05
    102e:	2c 83       	std	Y+4, r18	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	31 f0       	breq	.+12     	; 0x1044 <DIO_enuWritePin+0x1e8>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	21 30       	cpi	r18, 0x01	; 1
    103e:	31 05       	cpc	r19, r1
    1040:	c9 f0       	breq	.+50     	; 0x1074 <DIO_enuWritePin+0x218>
    1042:	2f c0       	rjmp	.+94     	; 0x10a2 <DIO_enuWritePin+0x246>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%8);
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c 01       	movw	r18, r24
    1058:	27 70       	andi	r18, 0x07	; 7
    105a:	30 70       	andi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_enuWritePin+0x20c>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_enuWritePin+0x208>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	1c c0       	rjmp	.+56     	; 0x10ac <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%8);
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9c 01       	movw	r18, r24
    1088:	27 70       	andi	r18, 0x07	; 7
    108a:	30 70       	andi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_enuWritePin+0x23c>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_enuWritePin+0x238>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_enuWritePin+0x250>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
	
}     
    10ae:	2b 96       	adiw	r28, 0x0b	; 11
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy ,uint8 * pu8PinValueCpy )
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_enuReadPin+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <DIO_enuReadPin+0x8>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	7c 83       	std	Y+4, r23	; 0x04
    10d0:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	09 f4       	brne	.+2      	; 0x10de <DIO_enuReadPin+0x1e>
    10dc:	6e c0       	rjmp	.+220    	; 0x11ba <DIO_enuReadPin+0xfa>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	a0 f4       	brcc	.+40     	; 0x110c <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
    10e4:	e9 e3       	ldi	r30, 0x39	; 57
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_enuReadPin+0x3c>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_enuReadPin+0x38>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	eb 81       	ldd	r30, Y+3	; 0x03
    1106:	fc 81       	ldd	r31, Y+4	; 0x04
    1108:	80 83       	st	Z, r24
    110a:	59 c0       	rjmp	.+178    	; 0x11be <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 30       	cpi	r24, 0x08	; 8
    1110:	c8 f0       	brcs	.+50     	; 0x1144 <DIO_enuReadPin+0x84>
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 31       	cpi	r24, 0x10	; 16
    1116:	b0 f4       	brcc	.+44     	; 0x1144 <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);		
    1118:	e6 e3       	ldi	r30, 0x36	; 54
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	87 70       	andi	r24, 0x07	; 7
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_enuReadPin+0x74>
    1130:	55 95       	asr	r21
    1132:	47 95       	ror	r20
    1134:	8a 95       	dec	r24
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_enuReadPin+0x70>
    1138:	ca 01       	movw	r24, r20
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	eb 81       	ldd	r30, Y+3	; 0x03
    113e:	fc 81       	ldd	r31, Y+4	; 0x04
    1140:	80 83       	st	Z, r24
    1142:	3d c0       	rjmp	.+122    	; 0x11be <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 31       	cpi	r24, 0x10	; 16
    1148:	c8 f0       	brcs	.+50     	; 0x117c <DIO_enuReadPin+0xbc>
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	88 31       	cpi	r24, 0x18	; 24
    114e:	b0 f4       	brcc	.+44     	; 0x117c <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%8);
    1150:	e3 e3       	ldi	r30, 0x33	; 51
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	87 70       	andi	r24, 0x07	; 7
    1162:	90 70       	andi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_enuReadPin+0xac>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_enuReadPin+0xa8>
    1170:	ca 01       	movw	r24, r20
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	eb 81       	ldd	r30, Y+3	; 0x03
    1176:	fc 81       	ldd	r31, Y+4	; 0x04
    1178:	80 83       	st	Z, r24
    117a:	21 c0       	rjmp	.+66     	; 0x11be <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	88 31       	cpi	r24, 0x18	; 24
    1180:	c8 f0       	brcs	.+50     	; 0x11b4 <DIO_enuReadPin+0xf4>
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	80 32       	cpi	r24, 0x20	; 32
    1186:	b0 f4       	brcc	.+44     	; 0x11b4 <DIO_enuReadPin+0xf4>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%8);
    1188:	e0 e3       	ldi	r30, 0x30	; 48
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	87 70       	andi	r24, 0x07	; 7
    119a:	90 70       	andi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_enuReadPin+0xe4>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_enuReadPin+0xe0>
    11a8:	ca 01       	movw	r24, r20
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	eb 81       	ldd	r30, Y+3	; 0x03
    11ae:	fc 81       	ldd	r31, Y+4	; 0x04
    11b0:	80 83       	st	Z, r24
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
	
}          
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy)        
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_enuStatePullup+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);	
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	6a 81       	ldd	r22, Y+2	; 0x02
    11e0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	28 97       	sbiw	r28, 0x08	; 8
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
    1206:	7e 83       	std	Y+6, r23	; 0x06
    1208:	6d 83       	std	Y+5, r22	; 0x05
    120a:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK ;
    120c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
    120e:	19 82       	std	Y+1, r1	; 0x01
    1210:	1d c0       	rjmp	.+58     	; 0x124c <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	fc 01       	movw	r30, r24
    121e:	e2 0f       	add	r30, r18
    1220:	f3 1f       	adc	r31, r19
    1222:	40 81       	ld	r20, Z
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	fc 01       	movw	r30, r24
    1230:	e2 0f       	add	r30, r18
    1232:	f3 1f       	adc	r31, r19
    1234:	90 81       	ld	r25, Z
    1236:	84 2f       	mov	r24, r20
    1238:	69 2f       	mov	r22, r25
    123a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
    123e:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc !=EOK)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 23       	and	r24, r24
    1244:	39 f4       	brne	.+14     	; 0x1254 <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK ;
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	99 81       	ldd	r25, Y+1	; 0x01
    124e:	8f 81       	ldd	r24, Y+7	; 0x07
    1250:	98 17       	cp	r25, r24
    1252:	f8 f2       	brcs	.-66     	; 0x1212 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc !=EOK)
		{
			break;
		}
	}
}
    1254:	28 96       	adiw	r28, 0x08	; 8
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <GIE_voidEnable>:
#include "STD_Types.h"
#include "BIT_Math.h"
#include "GIE.h"
#include "GIE_PRIV.h"
void GIE_voidEnable(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    126e:	af e5       	ldi	r26, 0x5F	; 95
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ef e5       	ldi	r30, 0x5F	; 95
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    128a:	af e5       	ldi	r26, 0x5F	; 95
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ef e5       	ldi	r30, 0x5F	; 95
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8f 77       	andi	r24, 0x7F	; 127
    1296:	8c 93       	st	X, r24
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	ce 58       	subi	r28, 0x8E	; 142
    12ac:	d0 40       	sbci	r29, 0x00	; 0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc = 0 ;
    12b8:	fe 01       	movw	r30, r28
    12ba:	e2 57       	subi	r30, 0x72	; 114
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	10 82       	st	Z, r1
	uint8 u8CmdLoc  = 0 ;
    12c0:	fe 01       	movw	r30, r28
    12c2:	e3 57       	subi	r30, 0x73	; 115
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	10 82       	st	Z, r1
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    12c8:	fe 01       	movw	r30, r28
    12ca:	e2 57       	subi	r30, 0x72	; 114
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	10 82       	st	Z, r1
    12d0:	0c 94 88 11 	jmp	0x2310	; 0x2310 <LCD_voidInit+0x1072>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    12d4:	fe 01       	movw	r30, r28
    12d6:	e2 57       	subi	r30, 0x72	; 114
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	c9 01       	movw	r24, r18
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	fc 01       	movw	r30, r24
    12f4:	e8 59       	subi	r30, 0x98	; 152
    12f6:	fe 4f       	sbci	r31, 0xFE	; 254
    12f8:	80 81       	ld	r24, Z
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <LCD_voidInit+0x64>
    1300:	75 c4       	rjmp	.+2282   	; 0x1bec <LCD_voidInit+0x94e>
    1302:	fe 01       	movw	r30, r28
    1304:	e7 57       	subi	r30, 0x77	; 119
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 ef       	ldi	r26, 0xF0	; 240
    130e:	b1 e4       	ldi	r27, 0x41	; 65
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	8e 01       	movw	r16, r28
    131a:	0b 57       	subi	r16, 0x7B	; 123
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e7 57       	subi	r30, 0x77	; 119
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	fe 01       	movw	r30, r28
    1348:	eb 57       	subi	r30, 0x7B	; 123
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	44 f4       	brge	.+16     	; 0x1374 <LCD_voidInit+0xd6>
		__ticks = 1;
    1364:	fe 01       	movw	r30, r28
    1366:	ed 57       	subi	r30, 0x7D	; 125
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	64 c0       	rjmp	.+200    	; 0x143c <LCD_voidInit+0x19e>
	else if (__tmp > 65535)
    1374:	fe 01       	movw	r30, r28
    1376:	eb 57       	subi	r30, 0x7B	; 123
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	0c f0       	brlt	.+2      	; 0x1394 <LCD_voidInit+0xf6>
    1392:	43 c0       	rjmp	.+134    	; 0x141a <LCD_voidInit+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	fe 01       	movw	r30, r28
    1396:	e7 57       	subi	r30, 0x77	; 119
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8e 01       	movw	r16, r28
    13b4:	0d 57       	subi	r16, 0x7D	; 125
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	1f c0       	rjmp	.+62     	; 0x140a <LCD_voidInit+0x16c>
    13cc:	fe 01       	movw	r30, r28
    13ce:	ef 57       	subi	r30, 0x7F	; 127
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13da:	fe 01       	movw	r30, r28
    13dc:	ef 57       	subi	r30, 0x7F	; 127
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_voidInit+0x146>
    13e8:	fe 01       	movw	r30, r28
    13ea:	ef 57       	subi	r30, 0x7F	; 127
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	de 01       	movw	r26, r28
    13f4:	ad 57       	subi	r26, 0x7D	; 125
    13f6:	bf 4f       	sbci	r27, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	ed 57       	subi	r30, 0x7D	; 125
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	9c 93       	st	X, r25
    1408:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	fe 01       	movw	r30, r28
    140c:	ed 57       	subi	r30, 0x7D	; 125
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	d1 f6       	brne	.-76     	; 0x13cc <LCD_voidInit+0x12e>
    1418:	27 c0       	rjmp	.+78     	; 0x1468 <LCD_voidInit+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	8e 01       	movw	r16, r28
    141c:	0d 57       	subi	r16, 0x7D	; 125
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	fe 01       	movw	r30, r28
    1422:	eb 57       	subi	r30, 0x7B	; 123
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	f8 01       	movw	r30, r16
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	de 01       	movw	r26, r28
    143e:	a1 58       	subi	r26, 0x81	; 129
    1440:	bf 4f       	sbci	r27, 0xFF	; 255
    1442:	fe 01       	movw	r30, r28
    1444:	ed 57       	subi	r30, 0x7D	; 125
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	8d 93       	st	X+, r24
    144e:	9c 93       	st	X, r25
    1450:	fe 01       	movw	r30, r28
    1452:	e1 58       	subi	r30, 0x81	; 129
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_voidInit+0x1bc>
    145e:	fe 01       	movw	r30, r28
    1460:	e1 58       	subi	r30, 0x81	; 129
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			u8CmdLoc = (0b00110000)  |
    1468:	fe 01       	movw	r30, r28
    146a:	e2 57       	subi	r30, 0x72	; 114
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	c9 01       	movw	r24, r18
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	fc 01       	movw	r30, r24
    1488:	e8 59       	subi	r30, 0x98	; 152
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	80 81       	ld	r24, Z
    148e:	86 95       	lsr	r24
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	48 2f       	mov	r20, r24
    14a4:	40 63       	ori	r20, 0x30	; 48
    14a6:	fe 01       	movw	r30, r28
    14a8:	e2 57       	subi	r30, 0x72	; 114
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 81       	ld	r24, Z
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	c9 01       	movw	r24, r18
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	82 0f       	add	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	fc 01       	movw	r30, r24
    14c6:	e8 59       	subi	r30, 0x98	; 152
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	80 81       	ld	r24, Z
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	84 2b       	or	r24, r20
    14e0:	fe 01       	movw	r30, r28
    14e2:	e3 57       	subi	r30, 0x73	; 115
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 3 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 2 );
			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    14e8:	fe 01       	movw	r30, r28
    14ea:	e2 57       	subi	r30, 0x72	; 114
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	de 01       	movw	r26, r28
    14f0:	a3 57       	subi	r26, 0x73	; 115
    14f2:	bf 4f       	sbci	r27, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	6c 91       	ld	r22, X
    14f8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    14fc:	fe 01       	movw	r30, r28
    14fe:	e5 58       	subi	r30, 0x85	; 133
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e8       	ldi	r26, 0x80	; 128
    1508:	bf e3       	ldi	r27, 0x3F	; 63
    150a:	80 83       	st	Z, r24
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	a2 83       	std	Z+2, r26	; 0x02
    1510:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	8e 01       	movw	r16, r28
    1514:	09 58       	subi	r16, 0x89	; 137
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	fe 01       	movw	r30, r28
    151a:	e5 58       	subi	r30, 0x85	; 133
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	93 81       	ldd	r25, Z+3	; 0x03
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a ef       	ldi	r20, 0xFA	; 250
    152c:	54 e4       	ldi	r21, 0x44	; 68
    152e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	f8 01       	movw	r30, r16
    1538:	80 83       	st	Z, r24
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	a2 83       	std	Z+2, r26	; 0x02
    153e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1540:	fe 01       	movw	r30, r28
    1542:	e9 58       	subi	r30, 0x89	; 137
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	44 f4       	brge	.+16     	; 0x156e <LCD_voidInit+0x2d0>
		__ticks = 1;
    155e:	fe 01       	movw	r30, r28
    1560:	eb 58       	subi	r30, 0x8B	; 139
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    156c:	64 c0       	rjmp	.+200    	; 0x1636 <LCD_voidInit+0x398>
	else if (__tmp > 65535)
    156e:	fe 01       	movw	r30, r28
    1570:	e9 58       	subi	r30, 0x89	; 137
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	60 81       	ld	r22, Z
    1576:	71 81       	ldd	r23, Z+1	; 0x01
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	93 81       	ldd	r25, Z+3	; 0x03
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	3f ef       	ldi	r19, 0xFF	; 255
    1580:	4f e7       	ldi	r20, 0x7F	; 127
    1582:	57 e4       	ldi	r21, 0x47	; 71
    1584:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1588:	18 16       	cp	r1, r24
    158a:	0c f0       	brlt	.+2      	; 0x158e <LCD_voidInit+0x2f0>
    158c:	43 c0       	rjmp	.+134    	; 0x1614 <LCD_voidInit+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	fe 01       	movw	r30, r28
    1590:	e5 58       	subi	r30, 0x85	; 133
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	8e 01       	movw	r16, r28
    15ae:	0b 58       	subi	r16, 0x8B	; 139
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	f8 01       	movw	r30, r16
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	80 83       	st	Z, r24
    15c4:	1f c0       	rjmp	.+62     	; 0x1604 <LCD_voidInit+0x366>
    15c6:	fe 01       	movw	r30, r28
    15c8:	ed 58       	subi	r30, 0x8D	; 141
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	88 ec       	ldi	r24, 0xC8	; 200
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	80 83       	st	Z, r24
    15d4:	fe 01       	movw	r30, r28
    15d6:	ed 58       	subi	r30, 0x8D	; 141
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_voidInit+0x340>
    15e2:	fe 01       	movw	r30, r28
    15e4:	ed 58       	subi	r30, 0x8D	; 141
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ec:	de 01       	movw	r26, r28
    15ee:	ab 58       	subi	r26, 0x8B	; 139
    15f0:	bf 4f       	sbci	r27, 0xFF	; 255
    15f2:	fe 01       	movw	r30, r28
    15f4:	eb 58       	subi	r30, 0x8B	; 139
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	9c 93       	st	X, r25
    1602:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	fe 01       	movw	r30, r28
    1606:	eb 58       	subi	r30, 0x8B	; 139
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	d1 f6       	brne	.-76     	; 0x15c6 <LCD_voidInit+0x328>
    1612:	27 c0       	rjmp	.+78     	; 0x1662 <LCD_voidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	8e 01       	movw	r16, r28
    1616:	0b 58       	subi	r16, 0x8B	; 139
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	fe 01       	movw	r30, r28
    161c:	e9 58       	subi	r30, 0x89	; 137
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	de 01       	movw	r26, r28
    1638:	af 58       	subi	r26, 0x8F	; 143
    163a:	bf 4f       	sbci	r27, 0xFF	; 255
    163c:	fe 01       	movw	r30, r28
    163e:	eb 58       	subi	r30, 0x8B	; 139
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	8d 93       	st	X+, r24
    1648:	9c 93       	st	X, r25
    164a:	fe 01       	movw	r30, r28
    164c:	ef 58       	subi	r30, 0x8F	; 143
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <LCD_voidInit+0x3b6>
    1658:	fe 01       	movw	r30, r28
    165a:	ef 58       	subi	r30, 0x8F	; 143
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			u8CmdLoc =   (0b00001000) |
    1662:	fe 01       	movw	r30, r28
    1664:	e2 57       	subi	r30, 0x72	; 114
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	c9 01       	movw	r24, r18
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	82 0f       	add	r24, r18
    1676:	93 1f       	adc	r25, r19
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	fc 01       	movw	r30, r24
    1682:	e8 59       	subi	r30, 0x98	; 152
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	80 81       	ld	r24, Z
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	48 2f       	mov	r20, r24
    169e:	48 60       	ori	r20, 0x08	; 8
    16a0:	fe 01       	movw	r30, r28
    16a2:	e2 57       	subi	r30, 0x72	; 114
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	c9 01       	movw	r24, r18
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	fc 01       	movw	r30, r24
    16c0:	e8 59       	subi	r30, 0x98	; 152
    16c2:	fe 4f       	sbci	r31, 0xFE	; 254
    16c4:	80 81       	ld	r24, Z
    16c6:	82 95       	swap	r24
    16c8:	8f 70       	andi	r24, 0x0F	; 15
    16ca:	81 70       	andi	r24, 0x01	; 1
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	48 2b       	or	r20, r24
    16d6:	fe 01       	movw	r30, r28
    16d8:	e2 57       	subi	r30, 0x72	; 114
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	c9 01       	movw	r24, r18
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	82 0f       	add	r24, r18
    16ea:	93 1f       	adc	r25, r19
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	fc 01       	movw	r30, r24
    16f6:	e8 59       	subi	r30, 0x98	; 152
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	80 81       	ld	r24, Z
    16fc:	82 95       	swap	r24
    16fe:	86 95       	lsr	r24
    1700:	87 70       	andi	r24, 0x07	; 7
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	84 2b       	or	r24, r20
    1706:	fe 01       	movw	r30, r28
    1708:	e3 57       	subi	r30, 0x73	; 115
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 2 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 1 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 0 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    170e:	fe 01       	movw	r30, r28
    1710:	e2 57       	subi	r30, 0x72	; 114
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	de 01       	movw	r26, r28
    1716:	a3 57       	subi	r26, 0x73	; 115
    1718:	bf 4f       	sbci	r27, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	6c 91       	ld	r22, X
    171e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    1722:	fe 01       	movw	r30, r28
    1724:	e3 59       	subi	r30, 0x93	; 147
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e8       	ldi	r26, 0x80	; 128
    172e:	bf e3       	ldi	r27, 0x3F	; 63
    1730:	80 83       	st	Z, r24
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	a2 83       	std	Z+2, r26	; 0x02
    1736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	8e 01       	movw	r16, r28
    173a:	07 59       	subi	r16, 0x97	; 151
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	fe 01       	movw	r30, r28
    1740:	e3 59       	subi	r30, 0x93	; 147
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	80 83       	st	Z, r24
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	a2 83       	std	Z+2, r26	; 0x02
    1764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1766:	fe 01       	movw	r30, r28
    1768:	e7 59       	subi	r30, 0x97	; 151
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	44 f4       	brge	.+16     	; 0x1794 <LCD_voidInit+0x4f6>
		__ticks = 1;
    1784:	fe 01       	movw	r30, r28
    1786:	e9 59       	subi	r30, 0x99	; 153
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
    1792:	64 c0       	rjmp	.+200    	; 0x185c <LCD_voidInit+0x5be>
	else if (__tmp > 65535)
    1794:	fe 01       	movw	r30, r28
    1796:	e7 59       	subi	r30, 0x97	; 151
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	0c f0       	brlt	.+2      	; 0x17b4 <LCD_voidInit+0x516>
    17b2:	43 c0       	rjmp	.+134    	; 0x183a <LCD_voidInit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 59       	subi	r30, 0x93	; 147
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8e 01       	movw	r16, r28
    17d4:	09 59       	subi	r16, 0x99	; 153
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	f8 01       	movw	r30, r16
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
    17ea:	1f c0       	rjmp	.+62     	; 0x182a <LCD_voidInit+0x58c>
    17ec:	fe 01       	movw	r30, r28
    17ee:	eb 59       	subi	r30, 0x9B	; 155
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	88 ec       	ldi	r24, 0xC8	; 200
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	fe 01       	movw	r30, r28
    17fc:	eb 59       	subi	r30, 0x9B	; 155
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_voidInit+0x566>
    1808:	fe 01       	movw	r30, r28
    180a:	eb 59       	subi	r30, 0x9B	; 155
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	de 01       	movw	r26, r28
    1814:	a9 59       	subi	r26, 0x99	; 153
    1816:	bf 4f       	sbci	r27, 0xFF	; 255
    1818:	fe 01       	movw	r30, r28
    181a:	e9 59       	subi	r30, 0x99	; 153
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	9c 93       	st	X, r25
    1828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	fe 01       	movw	r30, r28
    182c:	e9 59       	subi	r30, 0x99	; 153
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	d1 f6       	brne	.-76     	; 0x17ec <LCD_voidInit+0x54e>
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <LCD_voidInit+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	8e 01       	movw	r16, r28
    183c:	09 59       	subi	r16, 0x99	; 153
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	fe 01       	movw	r30, r28
    1842:	e7 59       	subi	r30, 0x97	; 151
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	de 01       	movw	r26, r28
    185e:	ad 59       	subi	r26, 0x9D	; 157
    1860:	bf 4f       	sbci	r27, 0xFF	; 255
    1862:	fe 01       	movw	r30, r28
    1864:	e9 59       	subi	r30, 0x99	; 153
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	8d 93       	st	X+, r24
    186e:	9c 93       	st	X, r25
    1870:	fe 01       	movw	r30, r28
    1872:	ed 59       	subi	r30, 0x9D	; 157
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_voidInit+0x5dc>
    187e:	fe 01       	movw	r30, r28
    1880:	ed 59       	subi	r30, 0x9D	; 157
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0x01);
    1888:	fe 01       	movw	r30, r28
    188a:	e2 57       	subi	r30, 0x72	; 114
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    1896:	fe 01       	movw	r30, r28
    1898:	e1 5a       	subi	r30, 0xA1	; 161
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e4       	ldi	r26, 0x40	; 64
    18a2:	b0 e4       	ldi	r27, 0x40	; 64
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	a2 83       	std	Z+2, r26	; 0x02
    18aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	8e 01       	movw	r16, r28
    18ae:	05 5a       	subi	r16, 0xA5	; 165
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	fe 01       	movw	r30, r28
    18b4:	e1 5a       	subi	r30, 0xA1	; 161
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	f8 01       	movw	r30, r16
    18d2:	80 83       	st	Z, r24
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	a2 83       	std	Z+2, r26	; 0x02
    18d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18da:	fe 01       	movw	r30, r28
    18dc:	e5 5a       	subi	r30, 0xA5	; 165
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	44 f4       	brge	.+16     	; 0x1908 <LCD_voidInit+0x66a>
		__ticks = 1;
    18f8:	fe 01       	movw	r30, r28
    18fa:	e7 5a       	subi	r30, 0xA7	; 167
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	64 c0       	rjmp	.+200    	; 0x19d0 <LCD_voidInit+0x732>
	else if (__tmp > 65535)
    1908:	fe 01       	movw	r30, r28
    190a:	e5 5a       	subi	r30, 0xA5	; 165
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	0c f0       	brlt	.+2      	; 0x1928 <LCD_voidInit+0x68a>
    1926:	43 c0       	rjmp	.+134    	; 0x19ae <LCD_voidInit+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	fe 01       	movw	r30, r28
    192a:	e1 5a       	subi	r30, 0xA1	; 161
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	8e 01       	movw	r16, r28
    1948:	07 5a       	subi	r16, 0xA7	; 167
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	f8 01       	movw	r30, r16
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
    195e:	1f c0       	rjmp	.+62     	; 0x199e <LCD_voidInit+0x700>
    1960:	fe 01       	movw	r30, r28
    1962:	e9 5a       	subi	r30, 0xA9	; 169
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	88 ec       	ldi	r24, 0xC8	; 200
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	80 83       	st	Z, r24
    196e:	fe 01       	movw	r30, r28
    1970:	e9 5a       	subi	r30, 0xA9	; 169
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_voidInit+0x6da>
    197c:	fe 01       	movw	r30, r28
    197e:	e9 5a       	subi	r30, 0xA9	; 169
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	de 01       	movw	r26, r28
    1988:	a7 5a       	subi	r26, 0xA7	; 167
    198a:	bf 4f       	sbci	r27, 0xFF	; 255
    198c:	fe 01       	movw	r30, r28
    198e:	e7 5a       	subi	r30, 0xA7	; 167
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	11 96       	adiw	r26, 0x01	; 1
    199a:	9c 93       	st	X, r25
    199c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	fe 01       	movw	r30, r28
    19a0:	e7 5a       	subi	r30, 0xA7	; 167
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	d1 f6       	brne	.-76     	; 0x1960 <LCD_voidInit+0x6c2>
    19ac:	27 c0       	rjmp	.+78     	; 0x19fc <LCD_voidInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	8e 01       	movw	r16, r28
    19b0:	07 5a       	subi	r16, 0xA7	; 167
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	fe 01       	movw	r30, r28
    19b6:	e5 5a       	subi	r30, 0xA5	; 165
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	de 01       	movw	r26, r28
    19d2:	ab 5a       	subi	r26, 0xAB	; 171
    19d4:	bf 4f       	sbci	r27, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	e7 5a       	subi	r30, 0xA7	; 167
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	8d 93       	st	X+, r24
    19e2:	9c 93       	st	X, r25
    19e4:	fe 01       	movw	r30, r28
    19e6:	eb 5a       	subi	r30, 0xAB	; 171
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_voidInit+0x750>
    19f2:	fe 01       	movw	r30, r28
    19f4:	eb 5a       	subi	r30, 0xAB	; 171
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			u8CmdLoc =   (0b00000100) |
    19fc:	fe 01       	movw	r30, r28
    19fe:	e2 57       	subi	r30, 0x72	; 114
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	c9 01       	movw	r24, r18
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	82 0f       	add	r24, r18
    1a10:	93 1f       	adc	r25, r19
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	e8 59       	subi	r30, 0x98	; 152
    1a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a20:	80 81       	ld	r24, Z
    1a22:	82 95       	swap	r24
    1a24:	86 95       	lsr	r24
    1a26:	86 95       	lsr	r24
    1a28:	83 70       	andi	r24, 0x03	; 3
    1a2a:	81 70       	andi	r24, 0x01	; 1
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	48 2f       	mov	r20, r24
    1a36:	44 60       	ori	r20, 0x04	; 4
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e2 57       	subi	r30, 0x72	; 114
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	c9 01       	movw	r24, r18
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	fc 01       	movw	r30, r24
    1a58:	e8 59       	subi	r30, 0x98	; 152
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 1f       	adc	r24, r24
    1a60:	88 27       	eor	r24, r24
    1a62:	88 1f       	adc	r24, r24
    1a64:	84 2b       	or	r24, r20
    1a66:	fe 01       	movw	r30, r28
    1a68:	e3 57       	subi	r30, 0x73	; 115
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 1 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 0 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e2 57       	subi	r30, 0x72	; 114
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	de 01       	movw	r26, r28
    1a76:	a3 57       	subi	r26, 0x73	; 115
    1a78:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	6c 91       	ld	r22, X
    1a7e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    1a82:	fe 01       	movw	r30, r28
    1a84:	ef 5a       	subi	r30, 0xAF	; 175
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e4       	ldi	r26, 0x40	; 64
    1a8e:	b0 e4       	ldi	r27, 0x40	; 64
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	03 5b       	subi	r16, 0xB3	; 179
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ef 5a       	subi	r30, 0xAF	; 175
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	80 83       	st	Z, r24
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	a2 83       	std	Z+2, r26	; 0x02
    1ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e3 5b       	subi	r30, 0xB3	; 179
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	44 f4       	brge	.+16     	; 0x1af4 <LCD_voidInit+0x856>
		__ticks = 1;
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e5 5b       	subi	r30, 0xB5	; 181
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
    1af2:	64 c0       	rjmp	.+200    	; 0x1bbc <LCD_voidInit+0x91e>
	else if (__tmp > 65535)
    1af4:	fe 01       	movw	r30, r28
    1af6:	e3 5b       	subi	r30, 0xB3	; 179
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	0c f0       	brlt	.+2      	; 0x1b14 <LCD_voidInit+0x876>
    1b12:	43 c0       	rjmp	.+134    	; 0x1b9a <LCD_voidInit+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	fe 01       	movw	r30, r28
    1b16:	ef 5a       	subi	r30, 0xAF	; 175
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8e 01       	movw	r16, r28
    1b34:	05 5b       	subi	r16, 0xB5	; 181
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f8 01       	movw	r30, r16
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	80 83       	st	Z, r24
    1b4a:	1f c0       	rjmp	.+62     	; 0x1b8a <LCD_voidInit+0x8ec>
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e7 5b       	subi	r30, 0xB7	; 183
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e7 5b       	subi	r30, 0xB7	; 183
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_voidInit+0x8c6>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e7 5b       	subi	r30, 0xB7	; 183
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	de 01       	movw	r26, r28
    1b74:	a5 5b       	subi	r26, 0xB5	; 181
    1b76:	bf 4f       	sbci	r27, 0xFF	; 255
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e5 5b       	subi	r30, 0xB5	; 181
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	11 96       	adiw	r26, 0x01	; 1
    1b86:	9c 93       	st	X, r25
    1b88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e5 5b       	subi	r30, 0xB5	; 181
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	d1 f6       	brne	.-76     	; 0x1b4c <LCD_voidInit+0x8ae>
    1b98:	b2 c3       	rjmp	.+1892   	; 0x22fe <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	8e 01       	movw	r16, r28
    1b9c:	05 5b       	subi	r16, 0xB5	; 181
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e3 5b       	subi	r30, 0xB3	; 179
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    1bbc:	de 01       	movw	r26, r28
    1bbe:	a9 5b       	subi	r26, 0xB9	; 185
    1bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e5 5b       	subi	r30, 0xB5	; 181
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	11 96       	adiw	r26, 0x01	; 1
    1bce:	9c 93       	st	X, r25
    1bd0:	8e 93       	st	-X, r24
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e9 5b       	subi	r30, 0xB9	; 185
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_voidInit+0x93e>
    1be0:	fe 01       	movw	r30, r28
    1be2:	e9 5b       	subi	r30, 0xB9	; 185
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    1bea:	89 c3       	rjmp	.+1810   	; 0x22fe <LCD_voidInit+0x1060>
    1bec:	fe 01       	movw	r30, r28
    1bee:	ed 5b       	subi	r30, 0xBD	; 189
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 ef       	ldi	r26, 0xF0	; 240
    1bf8:	b1 e4       	ldi	r27, 0x41	; 65
    1bfa:	80 83       	st	Z, r24
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	a2 83       	std	Z+2, r26	; 0x02
    1c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	8e 01       	movw	r16, r28
    1c04:	01 5c       	subi	r16, 0xC1	; 193
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ed 5b       	subi	r30, 0xBD	; 189
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 83       	st	Z, r24
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	a2 83       	std	Z+2, r26	; 0x02
    1c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c30:	fe 01       	movw	r30, r28
    1c32:	ff 96       	adiw	r30, 0x3f	; 63
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <LCD_voidInit+0x9b8>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9e af       	std	Y+62, r25	; 0x3e
    1c52:	8d af       	std	Y+61, r24	; 0x3d
    1c54:	46 c0       	rjmp	.+140    	; 0x1ce2 <LCD_voidInit+0xa44>
	else if (__tmp > 65535)
    1c56:	fe 01       	movw	r30, r28
    1c58:	ff 96       	adiw	r30, 0x3f	; 63
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	64 f5       	brge	.+88     	; 0x1cca <LCD_voidInit+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 5b       	subi	r30, 0xBD	; 189
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e af       	std	Y+62, r25	; 0x3e
    1c9e:	8d af       	std	Y+61, r24	; 0x3d
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_voidInit+0xa22>
    1ca2:	88 ec       	ldi	r24, 0xC8	; 200
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c af       	std	Y+60, r25	; 0x3c
    1ca8:	8b af       	std	Y+59, r24	; 0x3b
    1caa:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cac:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_voidInit+0xa10>
    1cb2:	9c af       	std	Y+60, r25	; 0x3c
    1cb4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9e af       	std	Y+62, r25	; 0x3e
    1cbe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_voidInit+0xa04>
    1cc8:	16 c0       	rjmp	.+44     	; 0x1cf6 <LCD_voidInit+0xa58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ff 96       	adiw	r30, 0x3f	; 63
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e af       	std	Y+62, r25	; 0x3e
    1ce0:	8d af       	std	Y+61, r24	; 0x3d
    1ce2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ce4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce6:	9a af       	std	Y+58, r25	; 0x3a
    1ce8:	89 af       	std	Y+57, r24	; 0x39
    1cea:	89 ad       	ldd	r24, Y+57	; 0x39
    1cec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_voidInit+0xa50>
    1cf2:	9a af       	std	Y+58, r25	; 0x3a
    1cf4:	89 af       	std	Y+57, r24	; 0x39
		else 
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			voidWriteCmd(u8CntrLoc , 0b00100000);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e2 57       	subi	r30, 0x72	; 114
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	60 e2       	ldi	r22, 0x20	; 32
    1d00:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00100000);
    1d04:	fe 01       	movw	r30, r28
    1d06:	e2 57       	subi	r30, 0x72	; 114
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	60 e2       	ldi	r22, 0x20	; 32
    1d0e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
			u8CmdLoc = (0b00100000)  |
    1d12:	fe 01       	movw	r30, r28
    1d14:	e2 57       	subi	r30, 0x72	; 114
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	c9 01       	movw	r24, r18
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	fc 01       	movw	r30, r24
    1d32:	e8 59       	subi	r30, 0x98	; 152
    1d34:	fe 4f       	sbci	r31, 0xFE	; 254
    1d36:	80 81       	ld	r24, Z
    1d38:	86 95       	lsr	r24
    1d3a:	81 70       	andi	r24, 0x01	; 1
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	96 95       	lsr	r25
    1d42:	98 2f       	mov	r25, r24
    1d44:	88 27       	eor	r24, r24
    1d46:	97 95       	ror	r25
    1d48:	87 95       	ror	r24
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	40 62       	ori	r20, 0x20	; 32
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e2 57       	subi	r30, 0x72	; 114
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	c9 01       	movw	r24, r18
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	82 0f       	add	r24, r18
    1d62:	93 1f       	adc	r25, r19
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e8 59       	subi	r30, 0x98	; 152
    1d70:	fe 4f       	sbci	r31, 0xFE	; 254
    1d72:	80 81       	ld	r24, Z
    1d74:	86 95       	lsr	r24
    1d76:	86 95       	lsr	r24
    1d78:	81 70       	andi	r24, 0x01	; 1
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	00 24       	eor	r0, r0
    1d80:	96 95       	lsr	r25
    1d82:	87 95       	ror	r24
    1d84:	07 94       	ror	r0
    1d86:	96 95       	lsr	r25
    1d88:	87 95       	ror	r24
    1d8a:	07 94       	ror	r0
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	80 2d       	mov	r24, r0
    1d90:	84 2b       	or	r24, r20
    1d92:	fe 01       	movw	r30, r28
    1d94:	e3 57       	subi	r30, 0x73	; 115
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 7 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 6 );
			
		    voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e2 57       	subi	r30, 0x72	; 114
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	de 01       	movw	r26, r28
    1da2:	a3 57       	subi	r26, 0x73	; 115
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	6c 91       	ld	r22, X
    1daa:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e8       	ldi	r26, 0x80	; 128
    1db4:	bf e3       	ldi	r27, 0x3F	; 63
    1db6:	8d ab       	std	Y+53, r24	; 0x35
    1db8:	9e ab       	std	Y+54, r25	; 0x36
    1dba:	af ab       	std	Y+55, r26	; 0x37
    1dbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a ef       	ldi	r20, 0xFA	; 250
    1dcc:	54 e4       	ldi	r21, 0x44	; 68
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	89 ab       	std	Y+49, r24	; 0x31
    1dd8:	9a ab       	std	Y+50, r25	; 0x32
    1dda:	ab ab       	std	Y+51, r26	; 0x33
    1ddc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dde:	69 a9       	ldd	r22, Y+49	; 0x31
    1de0:	7a a9       	ldd	r23, Y+50	; 0x32
    1de2:	8b a9       	ldd	r24, Y+51	; 0x33
    1de4:	9c a9       	ldd	r25, Y+52	; 0x34
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <LCD_voidInit+0xb62>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	98 ab       	std	Y+48, r25	; 0x30
    1dfc:	8f a7       	std	Y+47, r24	; 0x2f
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <LCD_voidInit+0xbe0>
	else if (__tmp > 65535)
    1e00:	69 a9       	ldd	r22, Y+49	; 0x31
    1e02:	7a a9       	ldd	r23, Y+50	; 0x32
    1e04:	8b a9       	ldd	r24, Y+51	; 0x33
    1e06:	9c a9       	ldd	r25, Y+52	; 0x34
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <LCD_voidInit+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	98 ab       	std	Y+48, r25	; 0x30
    1e3e:	8f a7       	std	Y+47, r24	; 0x2f
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <LCD_voidInit+0xbc2>
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9e a7       	std	Y+46, r25	; 0x2e
    1e48:	8d a7       	std	Y+45, r24	; 0x2d
    1e4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_voidInit+0xbb0>
    1e52:	9e a7       	std	Y+46, r25	; 0x2e
    1e54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e58:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	98 ab       	std	Y+48, r25	; 0x30
    1e5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e62:	98 a9       	ldd	r25, Y+48	; 0x30
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <LCD_voidInit+0xba4>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <LCD_voidInit+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e70:	9c a9       	ldd	r25, Y+52	; 0x34
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	98 ab       	std	Y+48, r25	; 0x30
    1e7c:	8f a7       	std	Y+47, r24	; 0x2f
    1e7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e80:	98 a9       	ldd	r25, Y+48	; 0x30
    1e82:	9c a7       	std	Y+44, r25	; 0x2c
    1e84:	8b a7       	std	Y+43, r24	; 0x2b
    1e86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_voidInit+0xbec>
    1e8e:	9c a7       	std	Y+44, r25	; 0x2c
    1e90:	8b a7       	std	Y+43, r24	; 0x2b
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1e92:	fe 01       	movw	r30, r28
    1e94:	e2 57       	subi	r30, 0x72	; 114
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
			
			u8CmdLoc =   (0b10000000) |
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e2 57       	subi	r30, 0x72	; 114
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	c9 01       	movw	r24, r18
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e8 59       	subi	r30, 0x98	; 152
    1ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec4:	80 81       	ld	r24, Z
    1ec6:	86 95       	lsr	r24
    1ec8:	86 95       	lsr	r24
    1eca:	86 95       	lsr	r24
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	00 24       	eor	r0, r0
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	07 94       	ror	r0
    1eda:	96 95       	lsr	r25
    1edc:	87 95       	ror	r24
    1ede:	07 94       	ror	r0
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	80 2d       	mov	r24, r0
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	40 68       	ori	r20, 0x80	; 128
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e2 57       	subi	r30, 0x72	; 114
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	82 0f       	add	r24, r18
    1efc:	93 1f       	adc	r25, r19
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	fc 01       	movw	r30, r24
    1f08:	e8 59       	subi	r30, 0x98	; 152
    1f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f0c:	80 81       	ld	r24, Z
    1f0e:	82 95       	swap	r24
    1f10:	8f 70       	andi	r24, 0x0F	; 15
    1f12:	81 70       	andi	r24, 0x01	; 1
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	82 95       	swap	r24
    1f1e:	92 95       	swap	r25
    1f20:	90 7f       	andi	r25, 0xF0	; 240
    1f22:	98 27       	eor	r25, r24
    1f24:	80 7f       	andi	r24, 0xF0	; 240
    1f26:	98 27       	eor	r25, r24
    1f28:	48 2b       	or	r20, r24
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e2 57       	subi	r30, 0x72	; 114
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	c9 01       	movw	r24, r18
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	82 0f       	add	r24, r18
    1f3e:	93 1f       	adc	r25, r19
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e8 59       	subi	r30, 0x98	; 152
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	80 81       	ld	r24, Z
    1f50:	82 95       	swap	r24
    1f52:	86 95       	lsr	r24
    1f54:	87 70       	andi	r24, 0x07	; 7
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	82 95       	swap	r24
    1f5e:	92 95       	swap	r25
    1f60:	90 7f       	andi	r25, 0xF0	; 240
    1f62:	98 27       	eor	r25, r24
    1f64:	80 7f       	andi	r24, 0xF0	; 240
    1f66:	98 27       	eor	r25, r24
    1f68:	84 2b       	or	r24, r20
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 57       	subi	r30, 0x73	; 115
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 6 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 5 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 4 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1f72:	fe 01       	movw	r30, r28
    1f74:	e2 57       	subi	r30, 0x72	; 114
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	de 01       	movw	r26, r28
    1f7a:	a3 57       	subi	r26, 0x73	; 115
    1f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	6c 91       	ld	r22, X
    1f82:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	8f a3       	std	Y+39, r24	; 0x27
    1f90:	98 a7       	std	Y+40, r25	; 0x28
    1f92:	a9 a7       	std	Y+41, r26	; 0x29
    1f94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	6f a1       	ldd	r22, Y+39	; 0x27
    1f98:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a ef       	ldi	r20, 0xFA	; 250
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8b a3       	std	Y+35, r24	; 0x23
    1fb0:	9c a3       	std	Y+36, r25	; 0x24
    1fb2:	ad a3       	std	Y+37, r26	; 0x25
    1fb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fba:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <LCD_voidInit+0xd3a>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9a a3       	std	Y+34, r25	; 0x22
    1fd4:	89 a3       	std	Y+33, r24	; 0x21
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <LCD_voidInit+0xdb8>
	else if (__tmp > 65535)
    1fd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fda:	7c a1       	ldd	r23, Y+36	; 0x24
    1fdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fde:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <LCD_voidInit+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9a a3       	std	Y+34, r25	; 0x22
    2016:	89 a3       	std	Y+33, r24	; 0x21
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <LCD_voidInit+0xd9a>
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	98 a3       	std	Y+32, r25	; 0x20
    2020:	8f 8f       	std	Y+31, r24	; 0x1f
    2022:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2024:	98 a1       	ldd	r25, Y+32	; 0x20
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_voidInit+0xd88>
    202a:	98 a3       	std	Y+32, r25	; 0x20
    202c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	89 a1       	ldd	r24, Y+33	; 0x21
    2030:	9a a1       	ldd	r25, Y+34	; 0x22
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	89 a1       	ldd	r24, Y+33	; 0x21
    203a:	9a a1       	ldd	r25, Y+34	; 0x22
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <LCD_voidInit+0xd7c>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <LCD_voidInit+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6b a1       	ldd	r22, Y+35	; 0x23
    2044:	7c a1       	ldd	r23, Y+36	; 0x24
    2046:	8d a1       	ldd	r24, Y+37	; 0x25
    2048:	9e a1       	ldd	r25, Y+38	; 0x26
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9a a3       	std	Y+34, r25	; 0x22
    2054:	89 a3       	std	Y+33, r24	; 0x21
    2056:	89 a1       	ldd	r24, Y+33	; 0x21
    2058:	9a a1       	ldd	r25, Y+34	; 0x22
    205a:	9e 8f       	std	Y+30, r25	; 0x1e
    205c:	8d 8f       	std	Y+29, r24	; 0x1d
    205e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2060:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_voidInit+0xdc4>
    2066:	9e 8f       	std	Y+30, r25	; 0x1e
    2068:	8d 8f       	std	Y+29, r24	; 0x1d
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    206a:	fe 01       	movw	r30, r28
    206c:	e2 57       	subi	r30, 0x72	; 114
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00010000);
    2078:	fe 01       	movw	r30, r28
    207a:	e2 57       	subi	r30, 0x72	; 114
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	60 e1       	ldi	r22, 0x10	; 16
    2082:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e4       	ldi	r26, 0x40	; 64
    208c:	b0 e4       	ldi	r27, 0x40	; 64
    208e:	89 8f       	std	Y+25, r24	; 0x19
    2090:	9a 8f       	std	Y+26, r25	; 0x1a
    2092:	ab 8f       	std	Y+27, r26	; 0x1b
    2094:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2096:	69 8d       	ldd	r22, Y+25	; 0x19
    2098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a ef       	ldi	r20, 0xFA	; 250
    20a4:	54 e4       	ldi	r21, 0x44	; 68
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8d 8b       	std	Y+21, r24	; 0x15
    20b0:	9e 8b       	std	Y+22, r25	; 0x16
    20b2:	af 8b       	std	Y+23, r26	; 0x17
    20b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b6:	6d 89       	ldd	r22, Y+21	; 0x15
    20b8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ba:	8f 89       	ldd	r24, Y+23	; 0x17
    20bc:	98 8d       	ldd	r25, Y+24	; 0x18
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <LCD_voidInit+0xe3a>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <LCD_voidInit+0xeb8>
	else if (__tmp > 65535)
    20d8:	6d 89       	ldd	r22, Y+21	; 0x15
    20da:	7e 89       	ldd	r23, Y+22	; 0x16
    20dc:	8f 89       	ldd	r24, Y+23	; 0x17
    20de:	98 8d       	ldd	r25, Y+24	; 0x18
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	4c f5       	brge	.+82     	; 0x2142 <LCD_voidInit+0xea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	69 8d       	ldd	r22, Y+25	; 0x19
    20f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9c 8b       	std	Y+20, r25	; 0x14
    2116:	8b 8b       	std	Y+19, r24	; 0x13
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <LCD_voidInit+0xe9a>
    211a:	88 ec       	ldi	r24, 0xC8	; 200
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9a 8b       	std	Y+18, r25	; 0x12
    2120:	89 8b       	std	Y+17, r24	; 0x11
    2122:	89 89       	ldd	r24, Y+17	; 0x11
    2124:	9a 89       	ldd	r25, Y+18	; 0x12
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_voidInit+0xe88>
    212a:	9a 8b       	std	Y+18, r25	; 0x12
    212c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8b 89       	ldd	r24, Y+19	; 0x13
    2130:	9c 89       	ldd	r25, Y+20	; 0x14
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9c 8b       	std	Y+20, r25	; 0x14
    2136:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <LCD_voidInit+0xe7c>
    2140:	14 c0       	rjmp	.+40     	; 0x216a <LCD_voidInit+0xecc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	8b 8b       	std	Y+19, r24	; 0x13
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	98 8b       	std	Y+16, r25	; 0x10
    215c:	8f 87       	std	Y+15, r24	; 0x0f
    215e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2160:	98 89       	ldd	r25, Y+16	; 0x10
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_voidInit+0xec4>
    2166:	98 8b       	std	Y+16, r25	; 0x10
    2168:	8f 87       	std	Y+15, r24	; 0x0f
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    216a:	fe 01       	movw	r30, r28
    216c:	e2 57       	subi	r30, 0x72	; 114
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
			u8CmdLoc =   (0b01000000) |
    2178:	fe 01       	movw	r30, r28
    217a:	e2 57       	subi	r30, 0x72	; 114
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	c9 01       	movw	r24, r18
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	82 0f       	add	r24, r18
    218c:	93 1f       	adc	r25, r19
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	fc 01       	movw	r30, r24
    2198:	e8 59       	subi	r30, 0x98	; 152
    219a:	fe 4f       	sbci	r31, 0xFE	; 254
    219c:	80 81       	ld	r24, Z
    219e:	82 95       	swap	r24
    21a0:	86 95       	lsr	r24
    21a2:	86 95       	lsr	r24
    21a4:	83 70       	andi	r24, 0x03	; 3
    21a6:	81 70       	andi	r24, 0x01	; 1
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	82 95       	swap	r24
    21b2:	92 95       	swap	r25
    21b4:	90 7f       	andi	r25, 0xF0	; 240
    21b6:	98 27       	eor	r25, r24
    21b8:	80 7f       	andi	r24, 0xF0	; 240
    21ba:	98 27       	eor	r25, r24
    21bc:	48 2f       	mov	r20, r24
    21be:	40 64       	ori	r20, 0x40	; 64
    21c0:	fe 01       	movw	r30, r28
    21c2:	e2 57       	subi	r30, 0x72	; 114
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	c9 01       	movw	r24, r18
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	82 0f       	add	r24, r18
    21d4:	93 1f       	adc	r25, r19
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	fc 01       	movw	r30, r24
    21e0:	e8 59       	subi	r30, 0x98	; 152
    21e2:	fe 4f       	sbci	r31, 0xFE	; 254
    21e4:	80 81       	ld	r24, Z
    21e6:	88 1f       	adc	r24, r24
    21e8:	88 27       	eor	r24, r24
    21ea:	88 1f       	adc	r24, r24
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	82 95       	swap	r24
    21f2:	92 95       	swap	r25
    21f4:	90 7f       	andi	r25, 0xF0	; 240
    21f6:	98 27       	eor	r25, r24
    21f8:	80 7f       	andi	r24, 0xF0	; 240
    21fa:	98 27       	eor	r25, r24
    21fc:	84 2b       	or	r24, r20
    21fe:	fe 01       	movw	r30, r28
    2200:	e3 57       	subi	r30, 0x73	; 115
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 5 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 4 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    2206:	fe 01       	movw	r30, r28
    2208:	e2 57       	subi	r30, 0x72	; 114
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	de 01       	movw	r26, r28
    220e:	a3 57       	subi	r26, 0x73	; 115
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	6c 91       	ld	r22, X
    2216:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e4       	ldi	r26, 0x40	; 64
    2220:	b0 e4       	ldi	r27, 0x40	; 64
    2222:	8b 87       	std	Y+11, r24	; 0x0b
    2224:	9c 87       	std	Y+12, r25	; 0x0c
    2226:	ad 87       	std	Y+13, r26	; 0x0d
    2228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	6b 85       	ldd	r22, Y+11	; 0x0b
    222c:	7c 85       	ldd	r23, Y+12	; 0x0c
    222e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2230:	9e 85       	ldd	r25, Y+14	; 0x0e
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a ef       	ldi	r20, 0xFA	; 250
    2238:	54 e4       	ldi	r21, 0x44	; 68
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8f 83       	std	Y+7, r24	; 0x07
    2244:	98 87       	std	Y+8, r25	; 0x08
    2246:	a9 87       	std	Y+9, r26	; 0x09
    2248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	2c f4       	brge	.+10     	; 0x226c <LCD_voidInit+0xfce>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	3f c0       	rjmp	.+126    	; 0x22ea <LCD_voidInit+0x104c>
	else if (__tmp > 65535)
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	4c f5       	brge	.+82     	; 0x22d6 <LCD_voidInit+0x1038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	6b 85       	ldd	r22, Y+11	; 0x0b
    2286:	7c 85       	ldd	r23, Y+12	; 0x0c
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	9e 85       	ldd	r25, Y+14	; 0x0e
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <LCD_voidInit+0x102e>
    22ae:	88 ec       	ldi	r24, 0xC8	; 200
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c 83       	std	Y+4, r25	; 0x04
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_voidInit+0x101c>
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	69 f7       	brne	.-38     	; 0x22ae <LCD_voidInit+0x1010>
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_voidInit+0x1058>
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc = 0 ;
	uint8 u8CmdLoc  = 0 ;
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    22fe:	de 01       	movw	r26, r28
    2300:	a2 57       	subi	r26, 0x72	; 114
    2302:	bf 4f       	sbci	r27, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	e2 57       	subi	r30, 0x72	; 114
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8c 93       	st	X, r24
    2310:	fe 01       	movw	r30, r28
    2312:	e2 57       	subi	r30, 0x72	; 114
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	88 23       	and	r24, r24
    231a:	11 f4       	brne	.+4      	; 0x2320 <LCD_voidInit+0x1082>
    231c:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <LCD_voidInit+0x36>
			_delay_ms(3);
		}
	}
	
	
}
    2320:	c2 57       	subi	r28, 0x72	; 114
    2322:	df 4f       	sbci	r29, 0xFF	; 255
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	ac 97       	sbiw	r28, 0x2c	; 44
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	8b a7       	std	Y+43, r24	; 0x2b
    234e:	6c a7       	std	Y+44, r22	; 0x2c
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2350:	8b a5       	ldd	r24, Y+43	; 0x2b
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	c9 01       	movw	r24, r18
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	fc 01       	movw	r30, r24
    236a:	e8 59       	subi	r30, 0x98	; 152
    236c:	fe 4f       	sbci	r31, 0xFE	; 254
    236e:	80 81       	ld	r24, Z
    2370:	81 70       	andi	r24, 0x01	; 1
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	09 f0       	breq	.+2      	; 0x2378 <LCD_voidWriteCmd+0x40>
    2376:	77 c0       	rjmp	.+238    	; 0x2466 <LCD_voidWriteCmd+0x12e>
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy );
    2378:	8b a5       	ldd	r24, Y+43	; 0x2b
    237a:	6c a5       	ldd	r22, Y+44	; 0x2c
    237c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e8       	ldi	r26, 0x80	; 128
    2386:	bf e3       	ldi	r27, 0x3F	; 63
    2388:	8f a3       	std	Y+39, r24	; 0x27
    238a:	98 a7       	std	Y+40, r25	; 0x28
    238c:	a9 a7       	std	Y+41, r26	; 0x29
    238e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	6f a1       	ldd	r22, Y+39	; 0x27
    2392:	78 a5       	ldd	r23, Y+40	; 0x28
    2394:	89 a5       	ldd	r24, Y+41	; 0x29
    2396:	9a a5       	ldd	r25, Y+42	; 0x2a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a ef       	ldi	r20, 0xFA	; 250
    239e:	54 e4       	ldi	r21, 0x44	; 68
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8b a3       	std	Y+35, r24	; 0x23
    23aa:	9c a3       	std	Y+36, r25	; 0x24
    23ac:	ad a3       	std	Y+37, r26	; 0x25
    23ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b0:	6b a1       	ldd	r22, Y+35	; 0x23
    23b2:	7c a1       	ldd	r23, Y+36	; 0x24
    23b4:	8d a1       	ldd	r24, Y+37	; 0x25
    23b6:	9e a1       	ldd	r25, Y+38	; 0x26
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <LCD_voidWriteCmd+0x9a>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <LCD_voidWriteCmd+0x118>
	else if (__tmp > 65535)
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <LCD_voidWriteCmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	6f a1       	ldd	r22, Y+39	; 0x27
    23ec:	78 a5       	ldd	r23, Y+40	; 0x28
    23ee:	89 a5       	ldd	r24, Y+41	; 0x29
    23f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9a a3       	std	Y+34, r25	; 0x22
    2410:	89 a3       	std	Y+33, r24	; 0x21
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <LCD_voidWriteCmd+0xfa>
    2414:	88 ec       	ldi	r24, 0xC8	; 200
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	98 a3       	std	Y+32, r25	; 0x20
    241a:	8f 8f       	std	Y+31, r24	; 0x1f
    241c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    241e:	98 a1       	ldd	r25, Y+32	; 0x20
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_voidWriteCmd+0xe8>
    2424:	98 a3       	std	Y+32, r25	; 0x20
    2426:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	89 a1       	ldd	r24, Y+33	; 0x21
    242a:	9a a1       	ldd	r25, Y+34	; 0x22
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	9a a3       	std	Y+34, r25	; 0x22
    2430:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	89 a1       	ldd	r24, Y+33	; 0x21
    2434:	9a a1       	ldd	r25, Y+34	; 0x22
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <LCD_voidWriteCmd+0xdc>
    243a:	05 c1       	rjmp	.+522    	; 0x2646 <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	6b a1       	ldd	r22, Y+35	; 0x23
    243e:	7c a1       	ldd	r23, Y+36	; 0x24
    2440:	8d a1       	ldd	r24, Y+37	; 0x25
    2442:	9e a1       	ldd	r25, Y+38	; 0x26
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	9a a1       	ldd	r25, Y+34	; 0x22
    2454:	9e 8f       	std	Y+30, r25	; 0x1e
    2456:	8d 8f       	std	Y+29, r24	; 0x1d
    2458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_voidWriteCmd+0x124>
    2460:	9e 8f       	std	Y+30, r25	; 0x1e
    2462:	8d 8f       	std	Y+29, r24	; 0x1d
    2464:	f0 c0       	rjmp	.+480    	; 0x2646 <LCD_voidWriteCmd+0x30e>
		_delay_ms(1);
	}
	else
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy);  
    2466:	8b a5       	ldd	r24, Y+43	; 0x2b
    2468:	6c a5       	ldd	r22, Y+44	; 0x2c
    246a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	a0 e8       	ldi	r26, 0x80	; 128
    2474:	bf e3       	ldi	r27, 0x3F	; 63
    2476:	89 8f       	std	Y+25, r24	; 0x19
    2478:	9a 8f       	std	Y+26, r25	; 0x1a
    247a:	ab 8f       	std	Y+27, r26	; 0x1b
    247c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247e:	69 8d       	ldd	r22, Y+25	; 0x19
    2480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a ef       	ldi	r20, 0xFA	; 250
    248c:	54 e4       	ldi	r21, 0x44	; 68
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	8d 8b       	std	Y+21, r24	; 0x15
    2498:	9e 8b       	std	Y+22, r25	; 0x16
    249a:	af 8b       	std	Y+23, r26	; 0x17
    249c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    249e:	6d 89       	ldd	r22, Y+21	; 0x15
    24a0:	7e 89       	ldd	r23, Y+22	; 0x16
    24a2:	8f 89       	ldd	r24, Y+23	; 0x17
    24a4:	98 8d       	ldd	r25, Y+24	; 0x18
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5f e3       	ldi	r21, 0x3F	; 63
    24ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b2:	88 23       	and	r24, r24
    24b4:	2c f4       	brge	.+10     	; 0x24c0 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
    24be:	3f c0       	rjmp	.+126    	; 0x253e <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    24c0:	6d 89       	ldd	r22, Y+21	; 0x15
    24c2:	7e 89       	ldd	r23, Y+22	; 0x16
    24c4:	8f 89       	ldd	r24, Y+23	; 0x17
    24c6:	98 8d       	ldd	r25, Y+24	; 0x18
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	3f ef       	ldi	r19, 0xFF	; 255
    24cc:	4f e7       	ldi	r20, 0x7F	; 127
    24ce:	57 e4       	ldi	r21, 0x47	; 71
    24d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d4:	18 16       	cp	r1, r24
    24d6:	4c f5       	brge	.+82     	; 0x252a <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d8:	69 8d       	ldd	r22, Y+25	; 0x19
    24da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	51 e4       	ldi	r21, 0x41	; 65
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9c 8b       	std	Y+20, r25	; 0x14
    24fe:	8b 8b       	std	Y+19, r24	; 0x13
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <LCD_voidWriteCmd+0x1e8>
    2502:	88 ec       	ldi	r24, 0xC8	; 200
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9a 8b       	std	Y+18, r25	; 0x12
    2508:	89 8b       	std	Y+17, r24	; 0x11
    250a:	89 89       	ldd	r24, Y+17	; 0x11
    250c:	9a 89       	ldd	r25, Y+18	; 0x12
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_voidWriteCmd+0x1d6>
    2512:	9a 8b       	std	Y+18, r25	; 0x12
    2514:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2516:	8b 89       	ldd	r24, Y+19	; 0x13
    2518:	9c 89       	ldd	r25, Y+20	; 0x14
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	69 f7       	brne	.-38     	; 0x2502 <LCD_voidWriteCmd+0x1ca>
    2528:	14 c0       	rjmp	.+40     	; 0x2552 <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9c 8b       	std	Y+20, r25	; 0x14
    253c:	8b 8b       	std	Y+19, r24	; 0x13
    253e:	8b 89       	ldd	r24, Y+19	; 0x13
    2540:	9c 89       	ldd	r25, Y+20	; 0x14
    2542:	98 8b       	std	Y+16, r25	; 0x10
    2544:	8f 87       	std	Y+15, r24	; 0x0f
    2546:	8f 85       	ldd	r24, Y+15	; 0x0f
    2548:	98 89       	ldd	r25, Y+16	; 0x10
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_voidWriteCmd+0x212>
    254e:	98 8b       	std	Y+16, r25	; 0x10
    2550:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy<<4);
    2552:	8c a5       	ldd	r24, Y+44	; 0x2c
    2554:	98 2f       	mov	r25, r24
    2556:	92 95       	swap	r25
    2558:	90 7f       	andi	r25, 0xF0	; 240
    255a:	8b a5       	ldd	r24, Y+43	; 0x2b
    255c:	69 2f       	mov	r22, r25
    255e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e8       	ldi	r26, 0x80	; 128
    2568:	bf e3       	ldi	r27, 0x3F	; 63
    256a:	8b 87       	std	Y+11, r24	; 0x0b
    256c:	9c 87       	std	Y+12, r25	; 0x0c
    256e:	ad 87       	std	Y+13, r26	; 0x0d
    2570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a ef       	ldi	r20, 0xFA	; 250
    2580:	54 e4       	ldi	r21, 0x44	; 68
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8f 83       	std	Y+7, r24	; 0x07
    258c:	98 87       	std	Y+8, r25	; 0x08
    258e:	a9 87       	std	Y+9, r26	; 0x09
    2590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	78 85       	ldd	r23, Y+8	; 0x08
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_voidWriteCmd+0x27c>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <LCD_voidWriteCmd+0x2fa>
	else if (__tmp > 65535)
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <LCD_voidWriteCmd+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <LCD_voidWriteCmd+0x2dc>
    25f6:	88 ec       	ldi	r24, 0xC8	; 200
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9c 83       	std	Y+4, r25	; 0x04
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_voidWriteCmd+0x2ca>
    2606:	9c 83       	std	Y+4, r25	; 0x04
    2608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <LCD_voidWriteCmd+0x2be>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_voidWriteCmd+0x306>
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    2646:	ac 96       	adiw	r28, 0x2c	; 44
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar(uint8 u8LcdIndxCpy , uint8 u8CharCpy)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	ac 97       	sbiw	r28, 0x2c	; 44
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	8b a7       	std	Y+43, r24	; 0x2b
    266e:	6c a7       	std	Y+44, r22	; 0x2c
	// Rs  1
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_HIGH );
    2670:	8b a5       	ldd	r24, Y+43	; 0x2b
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	c9 01       	movw	r24, r18
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	82 0f       	add	r24, r18
    267e:	93 1f       	adc	r25, r19
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	fc 01       	movw	r30, r24
    268a:	e7 59       	subi	r30, 0x97	; 151
    268c:	fe 4f       	sbci	r31, 0xFE	; 254
    268e:	80 81       	ld	r24, Z
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>



	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2696:	8b a5       	ldd	r24, Y+43	; 0x2b
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	c9 01       	movw	r24, r18
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	82 0f       	add	r24, r18
    26a4:	93 1f       	adc	r25, r19
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	fc 01       	movw	r30, r24
    26b0:	e8 59       	subi	r30, 0x98	; 152
    26b2:	fe 4f       	sbci	r31, 0xFE	; 254
    26b4:	80 81       	ld	r24, Z
    26b6:	81 70       	andi	r24, 0x01	; 1
    26b8:	81 30       	cpi	r24, 0x01	; 1
    26ba:	09 f0       	breq	.+2      	; 0x26be <LCD_voidDisplayChar+0x66>
    26bc:	77 c0       	rjmp	.+238    	; 0x27ac <LCD_voidDisplayChar+0x154>
	{

		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);
    26be:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c0:	6c a5       	ldd	r22, Y+44	; 0x2c
    26c2:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <voidLcdHelper>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a0 e8       	ldi	r26, 0x80	; 128
    26cc:	bf e3       	ldi	r27, 0x3F	; 63
    26ce:	8f a3       	std	Y+39, r24	; 0x27
    26d0:	98 a7       	std	Y+40, r25	; 0x28
    26d2:	a9 a7       	std	Y+41, r26	; 0x29
    26d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6f a1       	ldd	r22, Y+39	; 0x27
    26d8:	78 a5       	ldd	r23, Y+40	; 0x28
    26da:	89 a5       	ldd	r24, Y+41	; 0x29
    26dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8b a3       	std	Y+35, r24	; 0x23
    26f0:	9c a3       	std	Y+36, r25	; 0x24
    26f2:	ad a3       	std	Y+37, r26	; 0x25
    26f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f6:	6b a1       	ldd	r22, Y+35	; 0x23
    26f8:	7c a1       	ldd	r23, Y+36	; 0x24
    26fa:	8d a1       	ldd	r24, Y+37	; 0x25
    26fc:	9e a1       	ldd	r25, Y+38	; 0x26
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <LCD_voidDisplayChar+0xc0>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9a a3       	std	Y+34, r25	; 0x22
    2714:	89 a3       	std	Y+33, r24	; 0x21
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <LCD_voidDisplayChar+0x13e>
	else if (__tmp > 65535)
    2718:	6b a1       	ldd	r22, Y+35	; 0x23
    271a:	7c a1       	ldd	r23, Y+36	; 0x24
    271c:	8d a1       	ldd	r24, Y+37	; 0x25
    271e:	9e a1       	ldd	r25, Y+38	; 0x26
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <LCD_voidDisplayChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	6f a1       	ldd	r22, Y+39	; 0x27
    2732:	78 a5       	ldd	r23, Y+40	; 0x28
    2734:	89 a5       	ldd	r24, Y+41	; 0x29
    2736:	9a a5       	ldd	r25, Y+42	; 0x2a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9a a3       	std	Y+34, r25	; 0x22
    2756:	89 a3       	std	Y+33, r24	; 0x21
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <LCD_voidDisplayChar+0x120>
    275a:	88 ec       	ldi	r24, 0xC8	; 200
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	98 a3       	std	Y+32, r25	; 0x20
    2760:	8f 8f       	std	Y+31, r24	; 0x1f
    2762:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2764:	98 a1       	ldd	r25, Y+32	; 0x20
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_voidDisplayChar+0x10e>
    276a:	98 a3       	std	Y+32, r25	; 0x20
    276c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	89 a1       	ldd	r24, Y+33	; 0x21
    2770:	9a a1       	ldd	r25, Y+34	; 0x22
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9a a3       	std	Y+34, r25	; 0x22
    2776:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	89 a1       	ldd	r24, Y+33	; 0x21
    277a:	9a a1       	ldd	r25, Y+34	; 0x22
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <LCD_voidDisplayChar+0x102>
    2780:	09 c1       	rjmp	.+530    	; 0x2994 <LCD_voidDisplayChar+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6b a1       	ldd	r22, Y+35	; 0x23
    2784:	7c a1       	ldd	r23, Y+36	; 0x24
    2786:	8d a1       	ldd	r24, Y+37	; 0x25
    2788:	9e a1       	ldd	r25, Y+38	; 0x26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	9a a1       	ldd	r25, Y+34	; 0x22
    279a:	9e 8f       	std	Y+30, r25	; 0x1e
    279c:	8d 8f       	std	Y+29, r24	; 0x1d
    279e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_voidDisplayChar+0x14a>
    27a6:	9e 8f       	std	Y+30, r25	; 0x1e
    27a8:	8d 8f       	std	Y+29, r24	; 0x1d
    27aa:	f4 c0       	rjmp	.+488    	; 0x2994 <LCD_voidDisplayChar+0x33c>

	}
	else
	{
		
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);  
    27ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ae:	6c a5       	ldd	r22, Y+44	; 0x2c
    27b0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <voidLcdHelper>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a0 e8       	ldi	r26, 0x80	; 128
    27ba:	bf e3       	ldi	r27, 0x3F	; 63
    27bc:	89 8f       	std	Y+25, r24	; 0x19
    27be:	9a 8f       	std	Y+26, r25	; 0x1a
    27c0:	ab 8f       	std	Y+27, r26	; 0x1b
    27c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	69 8d       	ldd	r22, Y+25	; 0x19
    27c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a ef       	ldi	r20, 0xFA	; 250
    27d2:	54 e4       	ldi	r21, 0x44	; 68
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8d 8b       	std	Y+21, r24	; 0x15
    27de:	9e 8b       	std	Y+22, r25	; 0x16
    27e0:	af 8b       	std	Y+23, r26	; 0x17
    27e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e4:	6d 89       	ldd	r22, Y+21	; 0x15
    27e6:	7e 89       	ldd	r23, Y+22	; 0x16
    27e8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ea:	98 8d       	ldd	r25, Y+24	; 0x18
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	2c f4       	brge	.+10     	; 0x2806 <LCD_voidDisplayChar+0x1ae>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9c 8b       	std	Y+20, r25	; 0x14
    2802:	8b 8b       	std	Y+19, r24	; 0x13
    2804:	3f c0       	rjmp	.+126    	; 0x2884 <LCD_voidDisplayChar+0x22c>
	else if (__tmp > 65535)
    2806:	6d 89       	ldd	r22, Y+21	; 0x15
    2808:	7e 89       	ldd	r23, Y+22	; 0x16
    280a:	8f 89       	ldd	r24, Y+23	; 0x17
    280c:	98 8d       	ldd	r25, Y+24	; 0x18
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	4f e7       	ldi	r20, 0x7F	; 127
    2814:	57 e4       	ldi	r21, 0x47	; 71
    2816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281a:	18 16       	cp	r1, r24
    281c:	4c f5       	brge	.+82     	; 0x2870 <LCD_voidDisplayChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281e:	69 8d       	ldd	r22, Y+25	; 0x19
    2820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e2       	ldi	r20, 0x20	; 32
    282c:	51 e4       	ldi	r21, 0x41	; 65
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9c 8b       	std	Y+20, r25	; 0x14
    2844:	8b 8b       	std	Y+19, r24	; 0x13
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <LCD_voidDisplayChar+0x20e>
    2848:	88 ec       	ldi	r24, 0xC8	; 200
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9a 8b       	std	Y+18, r25	; 0x12
    284e:	89 8b       	std	Y+17, r24	; 0x11
    2850:	89 89       	ldd	r24, Y+17	; 0x11
    2852:	9a 89       	ldd	r25, Y+18	; 0x12
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <LCD_voidDisplayChar+0x1fc>
    2858:	9a 8b       	std	Y+18, r25	; 0x12
    285a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	9c 89       	ldd	r25, Y+20	; 0x14
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	9c 8b       	std	Y+20, r25	; 0x14
    2864:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2866:	8b 89       	ldd	r24, Y+19	; 0x13
    2868:	9c 89       	ldd	r25, Y+20	; 0x14
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	69 f7       	brne	.-38     	; 0x2848 <LCD_voidDisplayChar+0x1f0>
    286e:	14 c0       	rjmp	.+40     	; 0x2898 <LCD_voidDisplayChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2870:	6d 89       	ldd	r22, Y+21	; 0x15
    2872:	7e 89       	ldd	r23, Y+22	; 0x16
    2874:	8f 89       	ldd	r24, Y+23	; 0x17
    2876:	98 8d       	ldd	r25, Y+24	; 0x18
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
    2884:	8b 89       	ldd	r24, Y+19	; 0x13
    2886:	9c 89       	ldd	r25, Y+20	; 0x14
    2888:	98 8b       	std	Y+16, r25	; 0x10
    288a:	8f 87       	std	Y+15, r24	; 0x0f
    288c:	8f 85       	ldd	r24, Y+15	; 0x0f
    288e:	98 89       	ldd	r25, Y+16	; 0x10
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <LCD_voidDisplayChar+0x238>
    2894:	98 8b       	std	Y+16, r25	; 0x10
    2896:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy<<4);
    2898:	8c a5       	ldd	r24, Y+44	; 0x2c
    289a:	98 2f       	mov	r25, r24
    289c:	92 95       	swap	r25
    289e:	90 7f       	andi	r25, 0xF0	; 240
    28a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a2:	69 2f       	mov	r22, r25
    28a4:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <voidLcdHelper>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e8       	ldi	r26, 0x80	; 128
    28ae:	bf e3       	ldi	r27, 0x3F	; 63
    28b0:	8b 87       	std	Y+11, r24	; 0x0b
    28b2:	9c 87       	std	Y+12, r25	; 0x0c
    28b4:	ad 87       	std	Y+13, r26	; 0x0d
    28b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    28bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28be:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a ef       	ldi	r20, 0xFA	; 250
    28c6:	54 e4       	ldi	r21, 0x44	; 68
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8f 83       	std	Y+7, r24	; 0x07
    28d2:	98 87       	std	Y+8, r25	; 0x08
    28d4:	a9 87       	std	Y+9, r26	; 0x09
    28d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <LCD_voidDisplayChar+0x2a2>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <LCD_voidDisplayChar+0x320>
	else if (__tmp > 65535)
    28fa:	6f 81       	ldd	r22, Y+7	; 0x07
    28fc:	78 85       	ldd	r23, Y+8	; 0x08
    28fe:	89 85       	ldd	r24, Y+9	; 0x09
    2900:	9a 85       	ldd	r25, Y+10	; 0x0a
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <LCD_voidDisplayChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	6b 85       	ldd	r22, Y+11	; 0x0b
    2914:	7c 85       	ldd	r23, Y+12	; 0x0c
    2916:	8d 85       	ldd	r24, Y+13	; 0x0d
    2918:	9e 85       	ldd	r25, Y+14	; 0x0e
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
    293a:	0f c0       	rjmp	.+30     	; 0x295a <LCD_voidDisplayChar+0x302>
    293c:	88 ec       	ldi	r24, 0xC8	; 200
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_voidDisplayChar+0x2f0>
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	69 f7       	brne	.-38     	; 0x293c <LCD_voidDisplayChar+0x2e4>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <LCD_voidDisplayChar+0x32c>
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_voidWriteCmd(0,0x06);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	66 e0       	ldi	r22, 0x06	; 6
    2990:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_voidWriteCmd>

	}
	voidWriteCmd(0,0x06);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	66 e0       	ldi	r22, 0x06	; 6
    2998:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>

}
    299c:	ac 96       	adiw	r28, 0x2c	; 44
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <voidWriteCmd>:

static void voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <voidWriteCmd+0x6>
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	6a 83       	std	Y+2, r22	; 0x02
    // Rs  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_LOW );
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	c9 01       	movw	r24, r18
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	82 0f       	add	r24, r18
    29ca:	93 1f       	adc	r25, r19
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	fc 01       	movw	r30, r24
    29d6:	e7 59       	subi	r30, 0x97	; 151
    29d8:	fe 4f       	sbci	r31, 0xFE	; 254
    29da:	80 81       	ld	r24, Z
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
	
	voidLcdHelper( u8LcdIndxCpy, u8CmdCpy);
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	6a 81       	ldd	r22, Y+2	; 0x02
    29e6:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <voidLcdHelper>
	

}
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <voidLcdHelper>:

static void voidLcdHelper(uint8 u8LcdIndxCpy , uint8 u8CmdDataCpy)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	6f 97       	sbiw	r28, 0x1f	; 31
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	8e 8f       	std	Y+30, r24	; 0x1e
    2a0a:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc ;
	// RW  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rw , DIO_LOW );
    2a0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	c9 01       	movw	r24, r18
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	fc 01       	movw	r30, r24
    2a28:	e8 59       	subi	r30, 0x98	; 152
    2a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2c:	80 81       	ld	r24, Z
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
	//latch start
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_HIGH );
    2a34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	c9 01       	movw	r24, r18
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	82 0f       	add	r24, r18
    2a42:	93 1f       	adc	r25, r19
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e5 59       	subi	r30, 0x95	; 149
    2a50:	fe 4f       	sbci	r31, 0xFE	; 254
    2a52:	80 81       	ld	r24, Z
    2a54:	61 e0       	ldi	r22, 0x01	; 1
    2a56:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2a5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	c9 01       	movw	r24, r18
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	82 0f       	add	r24, r18
    2a68:	93 1f       	adc	r25, r19
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	fc 01       	movw	r30, r24
    2a74:	e8 59       	subi	r30, 0x98	; 152
    2a76:	fe 4f       	sbci	r31, 0xFE	; 254
    2a78:	80 81       	ld	r24, Z
    2a7a:	81 70       	andi	r24, 0x01	; 1
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	89 f5       	brne	.+98     	; 0x2ae2 <voidLcdHelper+0xee>
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    2a80:	1d 8e       	std	Y+29, r1	; 0x1d
    2a82:	2b c0       	rjmp	.+86     	; 0x2ada <voidLcdHelper+0xe6>
		{                   /* Rakm elselka                                                          cmd or data  */
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    2a84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	c9 01       	movw	r24, r18
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	82 0f       	add	r24, r18
    2a98:	93 1f       	adc	r25, r19
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	84 0f       	add	r24, r20
    2aa4:	95 1f       	adc	r25, r21
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e4 59       	subi	r30, 0x94	; 148
    2aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2aac:	40 81       	ld	r20, Z
    2aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	b9 01       	movw	r22, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <voidLcdHelper+0xce>
    2abe:	75 95       	asr	r23
    2ac0:	67 95       	ror	r22
    2ac2:	8a 95       	dec	r24
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <voidLcdHelper+0xca>
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	98 2f       	mov	r25, r24
    2aca:	91 70       	andi	r25, 0x01	; 1
    2acc:	84 2f       	mov	r24, r20
    2ace:	69 2f       	mov	r22, r25
    2ad0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    2ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	8d 8f       	std	Y+29, r24	; 0x1d
    2ada:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2adc:	88 30       	cpi	r24, 0x08	; 8
    2ade:	90 f2       	brcs	.-92     	; 0x2a84 <voidLcdHelper+0x90>
    2ae0:	31 c0       	rjmp	.+98     	; 0x2b44 <voidLcdHelper+0x150>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    2ae2:	84 e0       	ldi	r24, 0x04	; 4
    2ae4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae6:	2b c0       	rjmp	.+86     	; 0x2b3e <voidLcdHelper+0x14a>
		{
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    2ae8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af0:	48 2f       	mov	r20, r24
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	c9 01       	movw	r24, r18
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	82 0f       	add	r24, r18
    2afc:	93 1f       	adc	r25, r19
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	84 0f       	add	r24, r20
    2b08:	95 1f       	adc	r25, r21
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	e4 59       	subi	r30, 0x94	; 148
    2b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b10:	40 81       	ld	r20, Z
    2b12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b1a:	88 2f       	mov	r24, r24
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	b9 01       	movw	r22, r18
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <voidLcdHelper+0x132>
    2b22:	75 95       	asr	r23
    2b24:	67 95       	ror	r22
    2b26:	8a 95       	dec	r24
    2b28:	e2 f7       	brpl	.-8      	; 0x2b22 <voidLcdHelper+0x12e>
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	91 70       	andi	r25, 0x01	; 1
    2b30:	84 2f       	mov	r24, r20
    2b32:	69 2f       	mov	r22, r25
    2b34:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    2b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b40:	88 30       	cpi	r24, 0x08	; 8
    2b42:	90 f2       	brcs	.-92     	; 0x2ae8 <voidLcdHelper+0xf4>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e2       	ldi	r26, 0x20	; 32
    2b4a:	b1 e4       	ldi	r27, 0x41	; 65
    2b4c:	89 8f       	std	Y+25, r24	; 0x19
    2b4e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b50:	ab 8f       	std	Y+27, r26	; 0x1b
    2b52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	69 8d       	ldd	r22, Y+25	; 0x19
    2b56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8d 8b       	std	Y+21, r24	; 0x15
    2b6e:	9e 8b       	std	Y+22, r25	; 0x16
    2b70:	af 8b       	std	Y+23, r26	; 0x17
    2b72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b74:	6d 89       	ldd	r22, Y+21	; 0x15
    2b76:	7e 89       	ldd	r23, Y+22	; 0x16
    2b78:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <voidLcdHelper+0x1a2>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <voidLcdHelper+0x220>
	else if (__tmp > 65535)
    2b96:	6d 89       	ldd	r22, Y+21	; 0x15
    2b98:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <voidLcdHelper+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9c 8b       	std	Y+20, r25	; 0x14
    2bd4:	8b 8b       	std	Y+19, r24	; 0x13
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <voidLcdHelper+0x202>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9a 8b       	std	Y+18, r25	; 0x12
    2bde:	89 8b       	std	Y+17, r24	; 0x11
    2be0:	89 89       	ldd	r24, Y+17	; 0x11
    2be2:	9a 89       	ldd	r25, Y+18	; 0x12
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <voidLcdHelper+0x1f0>
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <voidLcdHelper+0x1e4>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <voidLcdHelper+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6d 89       	ldd	r22, Y+21	; 0x15
    2c02:	7e 89       	ldd	r23, Y+22	; 0x16
    2c04:	8f 89       	ldd	r24, Y+23	; 0x17
    2c06:	98 8d       	ldd	r25, Y+24	; 0x18
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
    2c14:	8b 89       	ldd	r24, Y+19	; 0x13
    2c16:	9c 89       	ldd	r25, Y+20	; 0x14
    2c18:	98 8b       	std	Y+16, r25	; 0x10
    2c1a:	8f 87       	std	Y+15, r24	; 0x0f
    2c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1e:	98 89       	ldd	r25, Y+16	; 0x10
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <voidLcdHelper+0x22c>
    2c24:	98 8b       	std	Y+16, r25	; 0x10
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}
	
	//latch
	_delay_ms(10);
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_LOW );
    2c28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	c9 01       	movw	r24, r18
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	82 0f       	add	r24, r18
    2c36:	93 1f       	adc	r25, r19
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	fc 01       	movw	r30, r24
    2c42:	e5 59       	subi	r30, 0x95	; 149
    2c44:	fe 4f       	sbci	r31, 0xFE	; 254
    2c46:	80 81       	ld	r24, Z
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	a0 e2       	ldi	r26, 0x20	; 32
    2c54:	b1 e4       	ldi	r27, 0x41	; 65
    2c56:	8b 87       	std	Y+11, r24	; 0x0b
    2c58:	9c 87       	std	Y+12, r25	; 0x0c
    2c5a:	ad 87       	std	Y+13, r26	; 0x0d
    2c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a ef       	ldi	r20, 0xFA	; 250
    2c6c:	54 e4       	ldi	r21, 0x44	; 68
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8f 83       	std	Y+7, r24	; 0x07
    2c78:	98 87       	std	Y+8, r25	; 0x08
    2c7a:	a9 87       	std	Y+9, r26	; 0x09
    2c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c80:	78 85       	ldd	r23, Y+8	; 0x08
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e8       	ldi	r20, 0x80	; 128
    2c8c:	5f e3       	ldi	r21, 0x3F	; 63
    2c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c92:	88 23       	and	r24, r24
    2c94:	2c f4       	brge	.+10     	; 0x2ca0 <voidLcdHelper+0x2ac>
		__ticks = 1;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	3f c0       	rjmp	.+126    	; 0x2d1e <voidLcdHelper+0x32a>
	else if (__tmp > 65535)
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	3f ef       	ldi	r19, 0xFF	; 255
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb4:	18 16       	cp	r1, r24
    2cb6:	4c f5       	brge	.+82     	; 0x2d0a <voidLcdHelper+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e2       	ldi	r20, 0x20	; 32
    2cc6:	51 e4       	ldi	r21, 0x41	; 65
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <voidLcdHelper+0x30c>
    2ce2:	88 ec       	ldi	r24, 0xC8	; 200
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <voidLcdHelper+0x2fa>
    2cf2:	9c 83       	std	Y+4, r25	; 0x04
    2cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	69 f7       	brne	.-38     	; 0x2ce2 <voidLcdHelper+0x2ee>
    2d08:	14 c0       	rjmp	.+40     	; 0x2d32 <voidLcdHelper+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0c:	78 85       	ldd	r23, Y+8	; 0x08
    2d0e:	89 85       	ldd	r24, Y+9	; 0x09
    2d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <voidLcdHelper+0x336>
    2d2e:	9a 83       	std	Y+2, r25	; 0x02
    2d30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    2d32:	6f 96       	adiw	r28, 0x1f	; 31
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <LCD_voidDisplayString>:
void LCD_voidDisplayString(uint8 u8LcdIndxCpy , uint8 * u8StrCpy)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <LCD_voidDisplayString+0x6>
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <LCD_voidDisplayString+0x8>
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	8b 83       	std	Y+3, r24	; 0x03
    2d54:	7d 83       	std	Y+5, r23	; 0x05
    2d56:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0,0x06);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	66 e0       	ldi	r22, 0x06	; 6
    2d5c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <voidWriteCmd>
	int i =0;
    2d60:	1a 82       	std	Y+2, r1	; 0x02
    2d62:	19 82       	std	Y+1, r1	; 0x01
    2d64:	11 c0       	rjmp	.+34     	; 0x2d88 <LCD_voidDisplayString+0x44>
	while(u8StrCpy[i]!='\0')
	{
	LCD_voidDisplayChar(u8LcdIndxCpy,u8StrCpy[i]);
    2d66:	29 81       	ldd	r18, Y+1	; 0x01
    2d68:	3a 81       	ldd	r19, Y+2	; 0x02
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	90 81       	ld	r25, Z
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	69 2f       	mov	r22, r25
    2d7a:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_voidDisplayChar>
	//voidWriteCmd(0,0x06);

	i++;
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_voidDisplayString(uint8 u8LcdIndxCpy , uint8 * u8StrCpy)
{
	voidWriteCmd(0,0x06);
	int i =0;
	while(u8StrCpy[i]!='\0')
    2d88:	29 81       	ldd	r18, Y+1	; 0x01
    2d8a:	3a 81       	ldd	r19, Y+2	; 0x02
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	fc 01       	movw	r30, r24
    2d92:	e2 0f       	add	r30, r18
    2d94:	f3 1f       	adc	r31, r19
    2d96:	80 81       	ld	r24, Z
    2d98:	88 23       	and	r24, r24
    2d9a:	29 f7       	brne	.-54     	; 0x2d66 <LCD_voidDisplayString+0x22>
	LCD_voidDisplayChar(u8LcdIndxCpy,u8StrCpy[i]);
	//voidWriteCmd(0,0x06);

	i++;
	}
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack = NULL;
pf  TIM1_pfInputCapturefCallBack = NULL;


void TIM1_voidInit(void)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
#if   TIM1_MODE ==  TIM1_NORMAL 
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    2db4:	af e4       	ldi	r26, 0x4F	; 79
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	ef e4       	ldi	r30, 0x4F	; 79
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8e 7f       	andi	r24, 0xFE	; 254
    2dc0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    2dc2:	af e4       	ldi	r26, 0x4F	; 79
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	ef e4       	ldi	r30, 0x4F	; 79
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	8d 7f       	andi	r24, 0xFD	; 253
    2dce:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    2dd0:	ae e4       	ldi	r26, 0x4E	; 78
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	ee e4       	ldi	r30, 0x4E	; 78
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	87 7f       	andi	r24, 0xF7	; 247
    2ddc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    2dde:	ae e4       	ldi	r26, 0x4E	; 78
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	ee e4       	ldi	r30, 0x4E	; 78
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	8f 7e       	andi	r24, 0xEF	; 239
    2dea:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , TCCR2_COM21); 
#elif TIM1_OUTFORM == TIM1_PH_INVERT 
    SET_BIT(TCCR2 , TCCR2_COM20);
	SET_BIT(TCCR2 , TCCR2_COM21);    
#elif TIM1_DISCONNECT
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
    2dec:	af e4       	ldi	r26, 0x4F	; 79
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	ef e4       	ldi	r30, 0x4F	; 79
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	8f 7b       	andi	r24, 0xBF	; 191
    2df8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_COM1A1); 
    2dfa:	af e4       	ldi	r26, 0x4F	; 79
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	ef e4       	ldi	r30, 0x4F	; 79
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	8f 77       	andi	r24, 0x7F	; 127
    2e06:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_COM1B1);
    2e08:	af e4       	ldi	r26, 0x4F	; 79
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ef e4       	ldi	r30, 0x4F	; 79
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8f 7d       	andi	r24, 0xDF	; 223
    2e14:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_COM1B0); 
    2e16:	af e4       	ldi	r26, 0x4F	; 79
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	ef e4       	ldi	r30, 0x4F	; 79
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	8f 7e       	andi	r24, 0xEF	; 239
    2e22:	8c 93       	st	X, r24
#endif
  /*Disable timer*/
	TCCR1A &= 0b11111100;
    2e24:	af e4       	ldi	r26, 0x4F	; 79
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	ef e4       	ldi	r30, 0x4F	; 79
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8c 7f       	andi	r24, 0xFC	; 252
    2e30:	8c 93       	st	X, r24
	TCCR1B &= 0b11100111;
    2e32:	ae e4       	ldi	r26, 0x4E	; 78
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	ee e4       	ldi	r30, 0x4E	; 78
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	87 7e       	andi	r24, 0xE7	; 231
    2e3e:	8c 93       	st	X, r24
  /*Disable Int OVF-CMP*/
  CLR_BIT(TIMSK , TIMSK_TOIE1  );
    2e40:	a9 e5       	ldi	r26, 0x59	; 89
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e9 e5       	ldi	r30, 0x59	; 89
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	8b 7f       	andi	r24, 0xFB	; 251
    2e4c:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , TIMSK_OCIE1B );
    2e4e:	a9 e5       	ldi	r26, 0x59	; 89
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e9 e5       	ldi	r30, 0x59	; 89
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	87 7f       	andi	r24, 0xF7	; 247
    2e5a:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , TIMSK_OCIE1A );
    2e5c:	a9 e5       	ldi	r26, 0x59	; 89
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e9 e5       	ldi	r30, 0x59	; 89
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	8f 7e       	andi	r24, 0xEF	; 239
    2e68:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , TIMSK_TICIE1 );
    2e6a:	a9 e5       	ldi	r26, 0x59	; 89
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e9 e5       	ldi	r30, 0x59	; 89
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	8f 7d       	andi	r24, 0xDF	; 223
    2e76:	8c 93       	st	X, r24

  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , TIFR_TOV1 );
    2e78:	a8 e5       	ldi	r26, 0x58	; 88
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e8 e5       	ldi	r30, 0x58	; 88
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	84 60       	ori	r24, 0x04	; 4
    2e84:	8c 93       	st	X, r24
  SET_BIT(TIFR , TIFR_OCF1B );
    2e86:	a8 e5       	ldi	r26, 0x58	; 88
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e8 e5       	ldi	r30, 0x58	; 88
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 60       	ori	r24, 0x08	; 8
    2e92:	8c 93       	st	X, r24
  SET_BIT(TIFR , TIFR_OCF1A );
    2e94:	a8 e5       	ldi	r26, 0x58	; 88
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e8 e5       	ldi	r30, 0x58	; 88
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	80 61       	ori	r24, 0x10	; 16
    2ea0:	8c 93       	st	X, r24
  SET_BIT(TIFR , TIFR_ICF1 );
    2ea2:	a8 e5       	ldi	r26, 0x58	; 88
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e8 e5       	ldi	r30, 0x58	; 88
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	80 62       	ori	r24, 0x20	; 32
    2eae:	8c 93       	st	X, r24
  
  /*Clear TCNT*/
  TCNT1 = 0 ;
    2eb0:	ec e4       	ldi	r30, 0x4C	; 76
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	11 82       	std	Z+1, r1	; 0x01
    2eb6:	10 82       	st	Z, r1
  OCR1A  = 0 ;
    2eb8:	ea e4       	ldi	r30, 0x4A	; 74
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	11 82       	std	Z+1, r1	; 0x01
    2ebe:	10 82       	st	Z, r1
  OCR1B  = 0 ;
    2ec0:	e8 e4       	ldi	r30, 0x48	; 72
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	11 82       	std	Z+1, r1	; 0x01
    2ec6:	10 82       	st	Z, r1
  ICR1 = 0;
    2ec8:	e6 e4       	ldi	r30, 0x46	; 70
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	11 82       	std	Z+1, r1	; 0x01
    2ece:	10 82       	st	Z, r1


  

}
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <TIM1_voidEnable>:
void TIM1_voidEnable(uint8 u8PrescalValCpy)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	0f 92       	push	r0
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    2ee2:	ae e4       	ldi	r26, 0x4E	; 78
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	ee e4       	ldi	r30, 0x4E	; 78
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	88 7f       	andi	r24, 0xF8	; 248
    2eee:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;
    2ef0:	ae e4       	ldi	r26, 0x4E	; 78
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	ee e4       	ldi	r30, 0x4E	; 78
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	98 2f       	mov	r25, r24
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	87 70       	andi	r24, 0x07	; 7
    2f00:	89 2b       	or	r24, r25
    2f02:	8c 93       	st	X, r24
	
}
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    2f14:	ae e4       	ldi	r26, 0x4E	; 78
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	ee e4       	ldi	r30, 0x4E	; 78
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 7f       	andi	r24, 0xF8	; 248
    2f20:	8c 93       	st	X, r24
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <TIM1_voidEnableNoiseCanclerICU>:

void TIM1_voidEnableNoiseCanclerICU(void)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
	  SET_BIT(TCCR1B , TCCR1B_ICNC1 );
    2f30:	ae e4       	ldi	r26, 0x4E	; 78
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	ee e4       	ldi	r30, 0x4E	; 78
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	80 68       	ori	r24, 0x80	; 128
    2f3c:	8c 93       	st	X, r24

}
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <TIM1_voidDisableNoiseCanclerICU>:

void TIM1_voidDisableNoiseCanclerICU(void)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
	  CLR_BIT(TCCR1B , TCCR1B_ICNC1  );
    2f4c:	ae e4       	ldi	r26, 0x4E	; 78
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	ee e4       	ldi	r30, 0x4E	; 78
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8f 77       	andi	r24, 0x7F	; 127
    2f58:	8c 93       	st	X, r24

}
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <TIM1_voidICURisingEdgeSellect>:
void TIM1_voidICURisingEdgeSellect(void)
{
    2f60:	df 93       	push	r29
    2f62:	cf 93       	push	r28
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
	  SET_BIT(TCCR1B , TCCR1B_ICES1 );
    2f68:	ae e4       	ldi	r26, 0x4E	; 78
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	ee e4       	ldi	r30, 0x4E	; 78
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	80 64       	ori	r24, 0x40	; 64
    2f74:	8c 93       	st	X, r24

}
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	08 95       	ret

00002f7c <TIM1_voidICUFallingEdgeSellect>:

void TIM1_voidICUFallingEdgeSellect(void)
{
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
	  CLR_BIT(TCCR1B , TCCR1B_ICES1  );
    2f84:	ae e4       	ldi	r26, 0x4E	; 78
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	ee e4       	ldi	r30, 0x4E	; 78
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	8f 7b       	andi	r24, 0xBF	; 191
    2f90:	8c 93       	st	X, r24

}
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_TOIE1 );
    2fa0:	a9 e5       	ldi	r26, 0x59	; 89
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e9 e5       	ldi	r30, 0x59	; 89
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	84 60       	ori	r24, 0x04	; 4
    2fac:	8c 93       	st	X, r24
}
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , TIMSK_TOIE1 );
    2fbc:	a9 e5       	ldi	r26, 0x59	; 89
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e9 e5       	ldi	r30, 0x59	; 89
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	8b 7f       	andi	r24, 0xFB	; 251
    2fc8:	8c 93       	st	X, r24
}
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <TIM1_voidEnableCmpIntA>:
void TIM1_voidEnableCmpIntA(void)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_OCIE1A);
    2fd8:	a9 e5       	ldi	r26, 0x59	; 89
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e9 e5       	ldi	r30, 0x59	; 89
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	80 61       	ori	r24, 0x10	; 16
    2fe4:	8c 93       	st	X, r24
}
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <TIM1_voidDisableCmpIntA>:
void TIM1_voidDisableCmpIntA(void)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , TIMSK_OCIE1A );
    2ff4:	a9 e5       	ldi	r26, 0x59	; 89
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e9 e5       	ldi	r30, 0x59	; 89
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	8f 7e       	andi	r24, 0xEF	; 239
    3000:	8c 93       	st	X, r24
}
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <TIM1_voidEnableCmpIntB>:
void TIM1_voidEnableCmpIntB(void)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_OCIE1B);
    3010:	a9 e5       	ldi	r26, 0x59	; 89
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e9 e5       	ldi	r30, 0x59	; 89
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	88 60       	ori	r24, 0x08	; 8
    301c:	8c 93       	st	X, r24
}
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <TIM1_voidDisableCmpIntB>:
void TIM1_voidDisableCmpIntB(void)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , TIMSK_OCIE1B);
    302c:	a9 e5       	ldi	r26, 0x59	; 89
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e9 e5       	ldi	r30, 0x59	; 89
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	87 7f       	andi	r24, 0xF7	; 247
    3038:	8c 93       	st	X, r24
}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <TIM1_voidEnableInputCaptureInt>:
void TIM1_voidEnableInputCaptureInt(void)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_TICIE1);
    3048:	a9 e5       	ldi	r26, 0x59	; 89
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e9 e5       	ldi	r30, 0x59	; 89
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	80 62       	ori	r24, 0x20	; 32
    3054:	8c 93       	st	X, r24
}
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <TIM1_voidDisableInputCaptureInt>:
void TIM1_voidDisableInputCaptureInt(void)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , TIMSK_TICIE1);
    3064:	a9 e5       	ldi	r26, 0x59	; 89
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e9 e5       	ldi	r30, 0x59	; 89
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	8f 7d       	andi	r24, 0xDF	; 223
    3070:	8c 93       	st	X, r24
}
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <TIM1_voidSetCallbackOvfInt>:




void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <TIM1_voidSetCallbackOvfInt+0x6>
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	9a 83       	std	Y+2, r25	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	90 93 77 01 	sts	0x0177, r25
    308e:	80 93 76 01 	sts	0x0176, r24
}
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <TIM1_voidSetCallbackInputCaptureInt>:
void TIM1_voidSetCallbackInputCaptureInt(pf pfInputCaptureCalbckCpy)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <TIM1_voidSetCallbackInputCaptureInt+0x6>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfInputCapturefCallBack = pfInputCaptureCalbckCpy;
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	9a 81       	ldd	r25, Y+2	; 0x02
    30ae:	90 93 7d 01 	sts	0x017D, r25
    30b2:	80 93 7c 01 	sts	0x017C, r24
}
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <TIM1_voidSetCallbackCmpIntA>:

void TIM1_voidSetCallbackCmpIntA(pf pfCmpACalbckCpy)
{
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	00 d0       	rcall	.+0      	; 0x30c6 <TIM1_voidSetCallbackCmpIntA+0x6>
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCmpACalbckCpy ;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	90 93 79 01 	sts	0x0179, r25
    30d6:	80 93 78 01 	sts	0x0178, r24
}
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <TIM1_voidSetCallbackCmpIntB>:
void TIM1_voidSetCallbackCmpIntB(pf pfCmpBCalbckCpy)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <TIM1_voidSetCallbackCmpIntB+0x6>
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCmpBCalbckCpy ;
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	9a 81       	ldd	r25, Y+2	; 0x02
    30f6:	90 93 7b 01 	sts	0x017B, r25
    30fa:	80 93 7a 01 	sts	0x017A, r24
}
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <TIM1_voidSetTimerValue>:



void TIM1_voidSetTimerValue(uint16 u16TimValCpy)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	00 d0       	rcall	.+0      	; 0x310e <TIM1_voidSetTimerValue+0x6>
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = u16TimValCpy ;
    3116:	ec e4       	ldi	r30, 0x4C	; 76
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	9a 81       	ldd	r25, Y+2	; 0x02
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <TIM1_voidSetCmpARegValue>:

void TIM1_voidSetCmpARegValue(uint16 u16CmpAValCpy)
{
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <TIM1_voidSetCmpARegValue+0x6>
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = u16CmpAValCpy ;
    313a:	ea e4       	ldi	r30, 0x4A	; 74
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
}
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(uint16 u16CmpBValCpy)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	00 d0       	rcall	.+0      	; 0x3156 <TIM1_voidSetCmpBRegValue+0x6>
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = u16CmpBValCpy ;
    315e:	ea e4       	ldi	r30, 0x4A	; 74
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <TIM1_u16ReadTimerValue>:
uint16 TIM1_u16ReadTimerValue(void)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    317c:	ec e4       	ldi	r30, 0x4C	; 76
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
}
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <__vector_9>:

/*OVF ISR*/
void __vector_9 (void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    318a:	1f 92       	push	r1
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	0f 92       	push	r0
    3192:	11 24       	eor	r1, r1
    3194:	2f 93       	push	r18
    3196:	3f 93       	push	r19
    3198:	4f 93       	push	r20
    319a:	5f 93       	push	r21
    319c:	6f 93       	push	r22
    319e:	7f 93       	push	r23
    31a0:	8f 93       	push	r24
    31a2:	9f 93       	push	r25
    31a4:	af 93       	push	r26
    31a6:	bf 93       	push	r27
    31a8:	ef 93       	push	r30
    31aa:	ff 93       	push	r31
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pfOvfCallBack != NULL )
    31b4:	80 91 76 01 	lds	r24, 0x0176
    31b8:	90 91 77 01 	lds	r25, 0x0177
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	29 f0       	breq	.+10     	; 0x31ca <__vector_9+0x40>
	{
	   TIM1_pfOvfCallBack();
    31c0:	e0 91 76 01 	lds	r30, 0x0176
    31c4:	f0 91 77 01 	lds	r31, 0x0177
    31c8:	09 95       	icall
	}
	
}
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	ff 91       	pop	r31
    31d0:	ef 91       	pop	r30
    31d2:	bf 91       	pop	r27
    31d4:	af 91       	pop	r26
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	7f 91       	pop	r23
    31dc:	6f 91       	pop	r22
    31de:	5f 91       	pop	r21
    31e0:	4f 91       	pop	r20
    31e2:	3f 91       	pop	r19
    31e4:	2f 91       	pop	r18
    31e6:	0f 90       	pop	r0
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	0f 90       	pop	r0
    31ec:	1f 90       	pop	r1
    31ee:	18 95       	reti

000031f0 <__vector_7>:
/*CM ISR */
void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    31f0:	1f 92       	push	r1
    31f2:	0f 92       	push	r0
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	0f 92       	push	r0
    31f8:	11 24       	eor	r1, r1
    31fa:	2f 93       	push	r18
    31fc:	3f 93       	push	r19
    31fe:	4f 93       	push	r20
    3200:	5f 93       	push	r21
    3202:	6f 93       	push	r22
    3204:	7f 93       	push	r23
    3206:	8f 93       	push	r24
    3208:	9f 93       	push	r25
    320a:	af 93       	push	r26
    320c:	bf 93       	push	r27
    320e:	ef 93       	push	r30
    3210:	ff 93       	push	r31
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pfCmpACallBack != NULL)
    321a:	80 91 78 01 	lds	r24, 0x0178
    321e:	90 91 79 01 	lds	r25, 0x0179
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	29 f0       	breq	.+10     	; 0x3230 <__vector_7+0x40>
	{
	   TIM1_pfCmpACallBack();
    3226:	e0 91 78 01 	lds	r30, 0x0178
    322a:	f0 91 79 01 	lds	r31, 0x0179
    322e:	09 95       	icall
	}
	
}
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	ff 91       	pop	r31
    3236:	ef 91       	pop	r30
    3238:	bf 91       	pop	r27
    323a:	af 91       	pop	r26
    323c:	9f 91       	pop	r25
    323e:	8f 91       	pop	r24
    3240:	7f 91       	pop	r23
    3242:	6f 91       	pop	r22
    3244:	5f 91       	pop	r21
    3246:	4f 91       	pop	r20
    3248:	3f 91       	pop	r19
    324a:	2f 91       	pop	r18
    324c:	0f 90       	pop	r0
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	0f 90       	pop	r0
    3252:	1f 90       	pop	r1
    3254:	18 95       	reti

00003256 <__vector_8>:

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    3256:	1f 92       	push	r1
    3258:	0f 92       	push	r0
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	0f 92       	push	r0
    325e:	11 24       	eor	r1, r1
    3260:	2f 93       	push	r18
    3262:	3f 93       	push	r19
    3264:	4f 93       	push	r20
    3266:	5f 93       	push	r21
    3268:	6f 93       	push	r22
    326a:	7f 93       	push	r23
    326c:	8f 93       	push	r24
    326e:	9f 93       	push	r25
    3270:	af 93       	push	r26
    3272:	bf 93       	push	r27
    3274:	ef 93       	push	r30
    3276:	ff 93       	push	r31
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pfCmpBCallBack != NULL)
    3280:	80 91 7a 01 	lds	r24, 0x017A
    3284:	90 91 7b 01 	lds	r25, 0x017B
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	29 f0       	breq	.+10     	; 0x3296 <__vector_8+0x40>
	{
	   TIM1_pfCmpBCallBack();
    328c:	e0 91 7a 01 	lds	r30, 0x017A
    3290:	f0 91 7b 01 	lds	r31, 0x017B
    3294:	09 95       	icall
	}
	
}
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	ff 91       	pop	r31
    329c:	ef 91       	pop	r30
    329e:	bf 91       	pop	r27
    32a0:	af 91       	pop	r26
    32a2:	9f 91       	pop	r25
    32a4:	8f 91       	pop	r24
    32a6:	7f 91       	pop	r23
    32a8:	6f 91       	pop	r22
    32aa:	5f 91       	pop	r21
    32ac:	4f 91       	pop	r20
    32ae:	3f 91       	pop	r19
    32b0:	2f 91       	pop	r18
    32b2:	0f 90       	pop	r0
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	0f 90       	pop	r0
    32b8:	1f 90       	pop	r1
    32ba:	18 95       	reti

000032bc <__vector_6>:

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    32bc:	1f 92       	push	r1
    32be:	0f 92       	push	r0
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	0f 92       	push	r0
    32c4:	11 24       	eor	r1, r1
    32c6:	2f 93       	push	r18
    32c8:	3f 93       	push	r19
    32ca:	4f 93       	push	r20
    32cc:	5f 93       	push	r21
    32ce:	6f 93       	push	r22
    32d0:	7f 93       	push	r23
    32d2:	8f 93       	push	r24
    32d4:	9f 93       	push	r25
    32d6:	af 93       	push	r26
    32d8:	bf 93       	push	r27
    32da:	ef 93       	push	r30
    32dc:	ff 93       	push	r31
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pfInputCapturefCallBack != NULL)
    32e6:	80 91 7c 01 	lds	r24, 0x017C
    32ea:	90 91 7d 01 	lds	r25, 0x017D
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	29 f0       	breq	.+10     	; 0x32fc <__vector_6+0x40>
	{
	   TIM1_pfInputCapturefCallBack();
    32f2:	e0 91 7c 01 	lds	r30, 0x017C
    32f6:	f0 91 7d 01 	lds	r31, 0x017D
    32fa:	09 95       	icall
	}
	
}
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	ff 91       	pop	r31
    3302:	ef 91       	pop	r30
    3304:	bf 91       	pop	r27
    3306:	af 91       	pop	r26
    3308:	9f 91       	pop	r25
    330a:	8f 91       	pop	r24
    330c:	7f 91       	pop	r23
    330e:	6f 91       	pop	r22
    3310:	5f 91       	pop	r21
    3312:	4f 91       	pop	r20
    3314:	3f 91       	pop	r19
    3316:	2f 91       	pop	r18
    3318:	0f 90       	pop	r0
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	0f 90       	pop	r0
    331e:	1f 90       	pop	r1
    3320:	18 95       	reti

00003322 <Timer1_OVFISR>:
#include "LCD.h"

volatile uint32 Rising_time=0,Falling_time=0,In_between_time=0;
volatile uint8 count=0;
void Timer1_OVFISR(void)
{
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
	count++;
    332a:	80 91 8a 01 	lds	r24, 0x018A
    332e:	8f 5f       	subi	r24, 0xFF	; 255
    3330:	80 93 8a 01 	sts	0x018A, r24
}
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
    3342:	68 97       	sbiw	r28, 0x18	; 24
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
	TIM1_voidICURisingEdgeSellect();
    334e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <TIM1_voidICURisingEdgeSellect>
	TIM1_voidSetTimerValue(0);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	0e 94 84 18 	call	0x3108	; 0x3108 <TIM1_voidSetTimerValue>
	DIO_enuWritePin(31,DIO_HIGH);
    335a:	8f e1       	ldi	r24, 0x1F	; 31
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	a8 ec       	ldi	r26, 0xC8	; 200
    3368:	b2 e4       	ldi	r27, 0x42	; 66
    336a:	8d 8b       	std	Y+21, r24	; 0x15
    336c:	9e 8b       	std	Y+22, r25	; 0x16
    336e:	af 8b       	std	Y+23, r26	; 0x17
    3370:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3372:	6d 89       	ldd	r22, Y+21	; 0x15
    3374:	7e 89       	ldd	r23, Y+22	; 0x16
    3376:	8f 89       	ldd	r24, Y+23	; 0x17
    3378:	98 8d       	ldd	r25, Y+24	; 0x18
    337a:	2b ea       	ldi	r18, 0xAB	; 171
    337c:	3a ea       	ldi	r19, 0xAA	; 170
    337e:	4a e2       	ldi	r20, 0x2A	; 42
    3380:	50 e4       	ldi	r21, 0x40	; 64
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	89 8b       	std	Y+17, r24	; 0x11
    338c:	9a 8b       	std	Y+18, r25	; 0x12
    338e:	ab 8b       	std	Y+19, r26	; 0x13
    3390:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3392:	69 89       	ldd	r22, Y+17	; 0x11
    3394:	7a 89       	ldd	r23, Y+18	; 0x12
    3396:	8b 89       	ldd	r24, Y+19	; 0x13
    3398:	9c 89       	ldd	r25, Y+20	; 0x14
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e8       	ldi	r20, 0x80	; 128
    33a0:	5f e3       	ldi	r21, 0x3F	; 63
    33a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a6:	88 23       	and	r24, r24
    33a8:	1c f4       	brge	.+6      	; 0x33b0 <Ultrasonic_Trigger+0x76>
		__ticks = 1;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	88 8b       	std	Y+16, r24	; 0x10
    33ae:	91 c0       	rjmp	.+290    	; 0x34d2 <Ultrasonic_Trigger+0x198>
	else if (__tmp > 255)
    33b0:	69 89       	ldd	r22, Y+17	; 0x11
    33b2:	7a 89       	ldd	r23, Y+18	; 0x12
    33b4:	8b 89       	ldd	r24, Y+19	; 0x13
    33b6:	9c 89       	ldd	r25, Y+20	; 0x14
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	53 e4       	ldi	r21, 0x43	; 67
    33c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	0c f0       	brlt	.+2      	; 0x33ca <Ultrasonic_Trigger+0x90>
    33c8:	7b c0       	rjmp	.+246    	; 0x34c0 <Ultrasonic_Trigger+0x186>
	{
		_delay_ms(__us / 1000.0);
    33ca:	6d 89       	ldd	r22, Y+21	; 0x15
    33cc:	7e 89       	ldd	r23, Y+22	; 0x16
    33ce:	8f 89       	ldd	r24, Y+23	; 0x17
    33d0:	98 8d       	ldd	r25, Y+24	; 0x18
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a e7       	ldi	r20, 0x7A	; 122
    33d8:	54 e4       	ldi	r21, 0x44	; 68
    33da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	8c 87       	std	Y+12, r24	; 0x0c
    33e4:	9d 87       	std	Y+13, r25	; 0x0d
    33e6:	ae 87       	std	Y+14, r26	; 0x0e
    33e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    33ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    33ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    33f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	4a ef       	ldi	r20, 0xFA	; 250
    33f8:	54 e4       	ldi	r21, 0x44	; 68
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	88 87       	std	Y+8, r24	; 0x08
    3404:	99 87       	std	Y+9, r25	; 0x09
    3406:	aa 87       	std	Y+10, r26	; 0x0a
    3408:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    340a:	68 85       	ldd	r22, Y+8	; 0x08
    340c:	79 85       	ldd	r23, Y+9	; 0x09
    340e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3410:	9b 85       	ldd	r25, Y+11	; 0x0b
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e8       	ldi	r20, 0x80	; 128
    3418:	5f e3       	ldi	r21, 0x3F	; 63
    341a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341e:	88 23       	and	r24, r24
    3420:	2c f4       	brge	.+10     	; 0x342c <Ultrasonic_Trigger+0xf2>
		__ticks = 1;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9f 83       	std	Y+7, r25	; 0x07
    3428:	8e 83       	std	Y+6, r24	; 0x06
    342a:	3f c0       	rjmp	.+126    	; 0x34aa <Ultrasonic_Trigger+0x170>
	else if (__tmp > 65535)
    342c:	68 85       	ldd	r22, Y+8	; 0x08
    342e:	79 85       	ldd	r23, Y+9	; 0x09
    3430:	8a 85       	ldd	r24, Y+10	; 0x0a
    3432:	9b 85       	ldd	r25, Y+11	; 0x0b
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	3f ef       	ldi	r19, 0xFF	; 255
    3438:	4f e7       	ldi	r20, 0x7F	; 127
    343a:	57 e4       	ldi	r21, 0x47	; 71
    343c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3440:	18 16       	cp	r1, r24
    3442:	4c f5       	brge	.+82     	; 0x3496 <Ultrasonic_Trigger+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3444:	6c 85       	ldd	r22, Y+12	; 0x0c
    3446:	7d 85       	ldd	r23, Y+13	; 0x0d
    3448:	8e 85       	ldd	r24, Y+14	; 0x0e
    344a:	9f 85       	ldd	r25, Y+15	; 0x0f
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e2       	ldi	r20, 0x20	; 32
    3452:	51 e4       	ldi	r21, 0x41	; 65
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9f 83       	std	Y+7, r25	; 0x07
    346a:	8e 83       	std	Y+6, r24	; 0x06
    346c:	0f c0       	rjmp	.+30     	; 0x348c <Ultrasonic_Trigger+0x152>
    346e:	88 ec       	ldi	r24, 0xC8	; 200
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9d 83       	std	Y+5, r25	; 0x05
    3474:	8c 83       	std	Y+4, r24	; 0x04
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	9d 81       	ldd	r25, Y+5	; 0x05
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <Ultrasonic_Trigger+0x140>
    347e:	9d 83       	std	Y+5, r25	; 0x05
    3480:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3482:	8e 81       	ldd	r24, Y+6	; 0x06
    3484:	9f 81       	ldd	r25, Y+7	; 0x07
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	9f 83       	std	Y+7, r25	; 0x07
    348a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348c:	8e 81       	ldd	r24, Y+6	; 0x06
    348e:	9f 81       	ldd	r25, Y+7	; 0x07
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	69 f7       	brne	.-38     	; 0x346e <Ultrasonic_Trigger+0x134>
    3494:	24 c0       	rjmp	.+72     	; 0x34de <Ultrasonic_Trigger+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3496:	68 85       	ldd	r22, Y+8	; 0x08
    3498:	79 85       	ldd	r23, Y+9	; 0x09
    349a:	8a 85       	ldd	r24, Y+10	; 0x0a
    349c:	9b 85       	ldd	r25, Y+11	; 0x0b
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9f 83       	std	Y+7, r25	; 0x07
    34a8:	8e 83       	std	Y+6, r24	; 0x06
    34aa:	8e 81       	ldd	r24, Y+6	; 0x06
    34ac:	9f 81       	ldd	r25, Y+7	; 0x07
    34ae:	9b 83       	std	Y+3, r25	; 0x03
    34b0:	8a 83       	std	Y+2, r24	; 0x02
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	9b 81       	ldd	r25, Y+3	; 0x03
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <Ultrasonic_Trigger+0x17c>
    34ba:	9b 83       	std	Y+3, r25	; 0x03
    34bc:	8a 83       	std	Y+2, r24	; 0x02
    34be:	0f c0       	rjmp	.+30     	; 0x34de <Ultrasonic_Trigger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34c0:	69 89       	ldd	r22, Y+17	; 0x11
    34c2:	7a 89       	ldd	r23, Y+18	; 0x12
    34c4:	8b 89       	ldd	r24, Y+19	; 0x13
    34c6:	9c 89       	ldd	r25, Y+20	; 0x14
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	88 8b       	std	Y+16, r24	; 0x10
    34d2:	88 89       	ldd	r24, Y+16	; 0x10
    34d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	8a 95       	dec	r24
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <Ultrasonic_Trigger+0x19e>
    34dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	DIO_enuWritePin(31,DIO_LOW);
    34de:	8f e1       	ldi	r24, 0x1F	; 31
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <DIO_enuWritePin>
}
    34e6:	68 96       	adiw	r28, 0x18	; 24
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	08 95       	ret

000034f8 <u32Ultrasonic_calculations>:
float32 u32Ultrasonic_calculations(void)
{
    34f8:	df 93       	push	r29
    34fa:	cf 93       	push	r28
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
	return (float32)((In_between_time*340)/2000000);
    3500:	80 91 86 01 	lds	r24, 0x0186
    3504:	90 91 87 01 	lds	r25, 0x0187
    3508:	a0 91 88 01 	lds	r26, 0x0188
    350c:	b0 91 89 01 	lds	r27, 0x0189
    3510:	24 e5       	ldi	r18, 0x54	; 84
    3512:	31 e0       	ldi	r19, 0x01	; 1
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 32 1c 	call	0x3864	; 0x3864 <__mulsi3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	20 e8       	ldi	r18, 0x80	; 128
    3526:	34 e8       	ldi	r19, 0x84	; 132
    3528:	4e e1       	ldi	r20, 0x1E	; 30
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__udivmodsi4>
    3534:	da 01       	movw	r26, r20
    3536:	c9 01       	movw	r24, r18
    3538:	bc 01       	movw	r22, r24
    353a:	cd 01       	movw	r24, r26
    353c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
}
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <Timer1_ICUISR>:
void Timer1_ICUISR(void)
{
    354e:	ef 92       	push	r14
    3550:	ff 92       	push	r15
    3552:	0f 93       	push	r16
    3554:	1f 93       	push	r17
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
	static uint8 Rising=1;

	if(Rising==1)
    355e:	80 91 74 01 	lds	r24, 0x0174
    3562:	81 30       	cpi	r24, 0x01	; 1
    3564:	b1 f4       	brne	.+44     	; 0x3592 <Timer1_ICUISR+0x44>
	{
		Rising_time=ICR1;
    3566:	e6 e4       	ldi	r30, 0x46	; 70
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	cc 01       	movw	r24, r24
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	80 93 7e 01 	sts	0x017E, r24
    3578:	90 93 7f 01 	sts	0x017F, r25
    357c:	a0 93 80 01 	sts	0x0180, r26
    3580:	b0 93 81 01 	sts	0x0181, r27
		TIM1_voidICUFallingEdgeSellect();
    3584:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <TIM1_voidICUFallingEdgeSellect>
		Rising=0;
    3588:	10 92 74 01 	sts	0x0174, r1
		count=0;
    358c:	10 92 8a 01 	sts	0x018A, r1
    3590:	3e c0       	rjmp	.+124    	; 0x360e <Timer1_ICUISR+0xc0>
	}
	else if (Rising==0)
    3592:	80 91 74 01 	lds	r24, 0x0174
    3596:	88 23       	and	r24, r24
    3598:	d1 f5       	brne	.+116    	; 0x360e <Timer1_ICUISR+0xc0>
	{
		Falling_time=ICR1+count*0xFFFF;
    359a:	e6 e4       	ldi	r30, 0x46	; 70
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	20 81       	ld	r18, Z
    35a0:	31 81       	ldd	r19, Z+1	; 0x01
    35a2:	80 91 8a 01 	lds	r24, 0x018A
    35a6:	88 2f       	mov	r24, r24
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	79 01       	movw	r14, r18
    35ac:	e8 1a       	sub	r14, r24
    35ae:	f9 0a       	sbc	r15, r25
    35b0:	c7 01       	movw	r24, r14
    35b2:	cc 01       	movw	r24, r24
    35b4:	a0 e0       	ldi	r26, 0x00	; 0
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	80 93 82 01 	sts	0x0182, r24
    35bc:	90 93 83 01 	sts	0x0183, r25
    35c0:	a0 93 84 01 	sts	0x0184, r26
    35c4:	b0 93 85 01 	sts	0x0185, r27
		//TIM1_voidICURisingEdgeSellect();
		Rising=1;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	80 93 74 01 	sts	0x0174, r24
		In_between_time=Falling_time-Rising_time;
    35ce:	20 91 82 01 	lds	r18, 0x0182
    35d2:	30 91 83 01 	lds	r19, 0x0183
    35d6:	40 91 84 01 	lds	r20, 0x0184
    35da:	50 91 85 01 	lds	r21, 0x0185
    35de:	80 91 7e 01 	lds	r24, 0x017E
    35e2:	90 91 7f 01 	lds	r25, 0x017F
    35e6:	a0 91 80 01 	lds	r26, 0x0180
    35ea:	b0 91 81 01 	lds	r27, 0x0181
    35ee:	79 01       	movw	r14, r18
    35f0:	8a 01       	movw	r16, r20
    35f2:	e8 1a       	sub	r14, r24
    35f4:	f9 0a       	sbc	r15, r25
    35f6:	0a 0b       	sbc	r16, r26
    35f8:	1b 0b       	sbc	r17, r27
    35fa:	d8 01       	movw	r26, r16
    35fc:	c7 01       	movw	r24, r14
    35fe:	80 93 86 01 	sts	0x0186, r24
    3602:	90 93 87 01 	sts	0x0187, r25
    3606:	a0 93 88 01 	sts	0x0188, r26
    360a:	b0 93 89 01 	sts	0x0189, r27
	}


}
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	ff 90       	pop	r15
    3618:	ef 90       	pop	r14
    361a:	08 95       	ret

0000361c <main>:
int main()
{
    361c:	df 93       	push	r29
    361e:	cf 93       	push	r28
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	a0 97       	sbiw	r28, 0x20	; 32
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
	float32 distance=0;
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	a0 e0       	ldi	r26, 0x00	; 0
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	8d 8f       	std	Y+29, r24	; 0x1d
    363a:	9e 8f       	std	Y+30, r25	; 0x1e
    363c:	af 8f       	std	Y+31, r26	; 0x1f
    363e:	b8 a3       	std	Y+32, r27	; 0x20
	DIO_voidInit();
    3640:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidInit>
	LCD_voidInit();
    3644:	0e 94 4f 09 	call	0x129e	; 0x129e <LCD_voidInit>
	TIM1_voidInit();
    3648:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TIM1_voidInit>
	TIM1_voidEnable(2);
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <TIM1_voidEnable>
	TIM1_voidICURisingEdgeSellect();
    3652:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <TIM1_voidICURisingEdgeSellect>
	TIM1_voidEnableInputCaptureInt();
    3656:	0e 94 20 18 	call	0x3040	; 0x3040 <TIM1_voidEnableInputCaptureInt>
	TIM1_voidSetCallbackInputCaptureInt(Timer1_ICUISR);
    365a:	87 ea       	ldi	r24, 0xA7	; 167
    365c:	9a e1       	ldi	r25, 0x1A	; 26
    365e:	0e 94 4e 18 	call	0x309c	; 0x309c <TIM1_voidSetCallbackInputCaptureInt>
	TIM1_voidSetCallbackOvfInt(Timer1_OVFISR);
    3662:	81 e9       	ldi	r24, 0x91	; 145
    3664:	99 e1       	ldi	r25, 0x19	; 25
    3666:	0e 94 3c 18 	call	0x3078	; 0x3078 <TIM1_voidSetCallbackOvfInt>
	GIE_voidEnable();
    366a:	0e 94 33 09 	call	0x1266	; 0x1266 <GIE_voidEnable>
	while(1)
	{
		Ultrasonic_Trigger();
    366e:	0e 94 9d 19 	call	0x333a	; 0x333a <Ultrasonic_Trigger>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a8 ec       	ldi	r26, 0xC8	; 200
    3678:	b2 e4       	ldi	r27, 0x42	; 66
    367a:	89 8f       	std	Y+25, r24	; 0x19
    367c:	9a 8f       	std	Y+26, r25	; 0x1a
    367e:	ab 8f       	std	Y+27, r26	; 0x1b
    3680:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3682:	69 8d       	ldd	r22, Y+25	; 0x19
    3684:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	4a ef       	ldi	r20, 0xFA	; 250
    3690:	54 e4       	ldi	r21, 0x44	; 68
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	8d 8b       	std	Y+21, r24	; 0x15
    369c:	9e 8b       	std	Y+22, r25	; 0x16
    369e:	af 8b       	std	Y+23, r26	; 0x17
    36a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36a2:	6d 89       	ldd	r22, Y+21	; 0x15
    36a4:	7e 89       	ldd	r23, Y+22	; 0x16
    36a6:	8f 89       	ldd	r24, Y+23	; 0x17
    36a8:	98 8d       	ldd	r25, Y+24	; 0x18
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <main+0xa8>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9c 8b       	std	Y+20, r25	; 0x14
    36c0:	8b 8b       	std	Y+19, r24	; 0x13
    36c2:	3f c0       	rjmp	.+126    	; 0x3742 <main+0x126>
	else if (__tmp > 65535)
    36c4:	6d 89       	ldd	r22, Y+21	; 0x15
    36c6:	7e 89       	ldd	r23, Y+22	; 0x16
    36c8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ca:	98 8d       	ldd	r25, Y+24	; 0x18
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	4c f5       	brge	.+82     	; 0x372e <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	69 8d       	ldd	r22, Y+25	; 0x19
    36de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e2       	ldi	r20, 0x20	; 32
    36ea:	51 e4       	ldi	r21, 0x41	; 65
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9c 8b       	std	Y+20, r25	; 0x14
    3702:	8b 8b       	std	Y+19, r24	; 0x13
    3704:	0f c0       	rjmp	.+30     	; 0x3724 <main+0x108>
    3706:	88 ec       	ldi	r24, 0xC8	; 200
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9a 8b       	std	Y+18, r25	; 0x12
    370c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    370e:	89 89       	ldd	r24, Y+17	; 0x11
    3710:	9a 89       	ldd	r25, Y+18	; 0x12
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <main+0xf6>
    3716:	9a 8b       	std	Y+18, r25	; 0x12
    3718:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	8b 89       	ldd	r24, Y+19	; 0x13
    371c:	9c 89       	ldd	r25, Y+20	; 0x14
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	9c 8b       	std	Y+20, r25	; 0x14
    3722:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	8b 89       	ldd	r24, Y+19	; 0x13
    3726:	9c 89       	ldd	r25, Y+20	; 0x14
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	69 f7       	brne	.-38     	; 0x3706 <main+0xea>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	6d 89       	ldd	r22, Y+21	; 0x15
    3730:	7e 89       	ldd	r23, Y+22	; 0x16
    3732:	8f 89       	ldd	r24, Y+23	; 0x17
    3734:	98 8d       	ldd	r25, Y+24	; 0x18
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9c 8b       	std	Y+20, r25	; 0x14
    3740:	8b 8b       	std	Y+19, r24	; 0x13
    3742:	8b 89       	ldd	r24, Y+19	; 0x13
    3744:	9c 89       	ldd	r25, Y+20	; 0x14
    3746:	98 8b       	std	Y+16, r25	; 0x10
    3748:	8f 87       	std	Y+15, r24	; 0x0f
    374a:	8f 85       	ldd	r24, Y+15	; 0x0f
    374c:	98 89       	ldd	r25, Y+16	; 0x10
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <main+0x132>
    3752:	98 8b       	std	Y+16, r25	; 0x10
    3754:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		distance=u32Ultrasonic_calculations();
    3756:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <u32Ultrasonic_calculations>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	8d 8f       	std	Y+29, r24	; 0x1d
    3760:	9e 8f       	std	Y+30, r25	; 0x1e
    3762:	af 8f       	std	Y+31, r26	; 0x1f
    3764:	b8 a3       	std	Y+32, r27	; 0x20

		LCD_voidDisplayChar(0,'1');
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	61 e3       	ldi	r22, 0x31	; 49
    376a:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,'5');
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	65 e3       	ldi	r22, 0x35	; 53
    3772:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,'6');
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	66 e3       	ldi	r22, 0x36	; 54
    377a:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_voidDisplayChar>
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e4       	ldi	r25, 0x40	; 64
    3782:	ac e1       	ldi	r26, 0x1C	; 28
    3784:	b6 e4       	ldi	r27, 0x46	; 70
    3786:	8b 87       	std	Y+11, r24	; 0x0b
    3788:	9c 87       	std	Y+12, r25	; 0x0c
    378a:	ad 87       	std	Y+13, r26	; 0x0d
    378c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3790:	7c 85       	ldd	r23, Y+12	; 0x0c
    3792:	8d 85       	ldd	r24, Y+13	; 0x0d
    3794:	9e 85       	ldd	r25, Y+14	; 0x0e
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	4a ef       	ldi	r20, 0xFA	; 250
    379c:	54 e4       	ldi	r21, 0x44	; 68
    379e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	8f 83       	std	Y+7, r24	; 0x07
    37a8:	98 87       	std	Y+8, r25	; 0x08
    37aa:	a9 87       	std	Y+9, r26	; 0x09
    37ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ae:	6f 81       	ldd	r22, Y+7	; 0x07
    37b0:	78 85       	ldd	r23, Y+8	; 0x08
    37b2:	89 85       	ldd	r24, Y+9	; 0x09
    37b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e8       	ldi	r20, 0x80	; 128
    37bc:	5f e3       	ldi	r21, 0x3F	; 63
    37be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c2:	88 23       	and	r24, r24
    37c4:	2c f4       	brge	.+10     	; 0x37d0 <main+0x1b4>
		__ticks = 1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
    37ce:	3f c0       	rjmp	.+126    	; 0x384e <main+0x232>
	else if (__tmp > 65535)
    37d0:	6f 81       	ldd	r22, Y+7	; 0x07
    37d2:	78 85       	ldd	r23, Y+8	; 0x08
    37d4:	89 85       	ldd	r24, Y+9	; 0x09
    37d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	3f ef       	ldi	r19, 0xFF	; 255
    37dc:	4f e7       	ldi	r20, 0x7F	; 127
    37de:	57 e4       	ldi	r21, 0x47	; 71
    37e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e4:	18 16       	cp	r1, r24
    37e6:	4c f5       	brge	.+82     	; 0x383a <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	51 e4       	ldi	r21, 0x41	; 65
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	9e 83       	std	Y+6, r25	; 0x06
    380e:	8d 83       	std	Y+5, r24	; 0x05
    3810:	0f c0       	rjmp	.+30     	; 0x3830 <main+0x214>
    3812:	88 ec       	ldi	r24, 0xC8	; 200
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	9c 83       	std	Y+4, r25	; 0x04
    3818:	8b 83       	std	Y+3, r24	; 0x03
    381a:	8b 81       	ldd	r24, Y+3	; 0x03
    381c:	9c 81       	ldd	r25, Y+4	; 0x04
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <main+0x202>
    3822:	9c 83       	std	Y+4, r25	; 0x04
    3824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3826:	8d 81       	ldd	r24, Y+5	; 0x05
    3828:	9e 81       	ldd	r25, Y+6	; 0x06
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	9e 83       	std	Y+6, r25	; 0x06
    382e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3830:	8d 81       	ldd	r24, Y+5	; 0x05
    3832:	9e 81       	ldd	r25, Y+6	; 0x06
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	69 f7       	brne	.-38     	; 0x3812 <main+0x1f6>
    3838:	1a cf       	rjmp	.-460    	; 0x366e <main+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383a:	6f 81       	ldd	r22, Y+7	; 0x07
    383c:	78 85       	ldd	r23, Y+8	; 0x08
    383e:	89 85       	ldd	r24, Y+9	; 0x09
    3840:	9a 85       	ldd	r25, Y+10	; 0x0a
    3842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	9e 83       	std	Y+6, r25	; 0x06
    384c:	8d 83       	std	Y+5, r24	; 0x05
    384e:	8d 81       	ldd	r24, Y+5	; 0x05
    3850:	9e 81       	ldd	r25, Y+6	; 0x06
    3852:	9a 83       	std	Y+2, r25	; 0x02
    3854:	89 83       	std	Y+1, r24	; 0x01
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <main+0x23e>
    385e:	9a 83       	std	Y+2, r25	; 0x02
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	05 cf       	rjmp	.-502    	; 0x366e <main+0x52>

00003864 <__mulsi3>:
    3864:	62 9f       	mul	r22, r18
    3866:	d0 01       	movw	r26, r0
    3868:	73 9f       	mul	r23, r19
    386a:	f0 01       	movw	r30, r0
    386c:	82 9f       	mul	r24, r18
    386e:	e0 0d       	add	r30, r0
    3870:	f1 1d       	adc	r31, r1
    3872:	64 9f       	mul	r22, r20
    3874:	e0 0d       	add	r30, r0
    3876:	f1 1d       	adc	r31, r1
    3878:	92 9f       	mul	r25, r18
    387a:	f0 0d       	add	r31, r0
    387c:	83 9f       	mul	r24, r19
    387e:	f0 0d       	add	r31, r0
    3880:	74 9f       	mul	r23, r20
    3882:	f0 0d       	add	r31, r0
    3884:	65 9f       	mul	r22, r21
    3886:	f0 0d       	add	r31, r0
    3888:	99 27       	eor	r25, r25
    388a:	72 9f       	mul	r23, r18
    388c:	b0 0d       	add	r27, r0
    388e:	e1 1d       	adc	r30, r1
    3890:	f9 1f       	adc	r31, r25
    3892:	63 9f       	mul	r22, r19
    3894:	b0 0d       	add	r27, r0
    3896:	e1 1d       	adc	r30, r1
    3898:	f9 1f       	adc	r31, r25
    389a:	bd 01       	movw	r22, r26
    389c:	cf 01       	movw	r24, r30
    389e:	11 24       	eor	r1, r1
    38a0:	08 95       	ret

000038a2 <__udivmodsi4>:
    38a2:	a1 e2       	ldi	r26, 0x21	; 33
    38a4:	1a 2e       	mov	r1, r26
    38a6:	aa 1b       	sub	r26, r26
    38a8:	bb 1b       	sub	r27, r27
    38aa:	fd 01       	movw	r30, r26
    38ac:	0d c0       	rjmp	.+26     	; 0x38c8 <__udivmodsi4_ep>

000038ae <__udivmodsi4_loop>:
    38ae:	aa 1f       	adc	r26, r26
    38b0:	bb 1f       	adc	r27, r27
    38b2:	ee 1f       	adc	r30, r30
    38b4:	ff 1f       	adc	r31, r31
    38b6:	a2 17       	cp	r26, r18
    38b8:	b3 07       	cpc	r27, r19
    38ba:	e4 07       	cpc	r30, r20
    38bc:	f5 07       	cpc	r31, r21
    38be:	20 f0       	brcs	.+8      	; 0x38c8 <__udivmodsi4_ep>
    38c0:	a2 1b       	sub	r26, r18
    38c2:	b3 0b       	sbc	r27, r19
    38c4:	e4 0b       	sbc	r30, r20
    38c6:	f5 0b       	sbc	r31, r21

000038c8 <__udivmodsi4_ep>:
    38c8:	66 1f       	adc	r22, r22
    38ca:	77 1f       	adc	r23, r23
    38cc:	88 1f       	adc	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	1a 94       	dec	r1
    38d2:	69 f7       	brne	.-38     	; 0x38ae <__udivmodsi4_loop>
    38d4:	60 95       	com	r22
    38d6:	70 95       	com	r23
    38d8:	80 95       	com	r24
    38da:	90 95       	com	r25
    38dc:	9b 01       	movw	r18, r22
    38de:	ac 01       	movw	r20, r24
    38e0:	bd 01       	movw	r22, r26
    38e2:	cf 01       	movw	r24, r30
    38e4:	08 95       	ret

000038e6 <__prologue_saves__>:
    38e6:	2f 92       	push	r2
    38e8:	3f 92       	push	r3
    38ea:	4f 92       	push	r4
    38ec:	5f 92       	push	r5
    38ee:	6f 92       	push	r6
    38f0:	7f 92       	push	r7
    38f2:	8f 92       	push	r8
    38f4:	9f 92       	push	r9
    38f6:	af 92       	push	r10
    38f8:	bf 92       	push	r11
    38fa:	cf 92       	push	r12
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
    390e:	ca 1b       	sub	r28, r26
    3910:	db 0b       	sbc	r29, r27
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	09 94       	ijmp

0000391e <__epilogue_restores__>:
    391e:	2a 88       	ldd	r2, Y+18	; 0x12
    3920:	39 88       	ldd	r3, Y+17	; 0x11
    3922:	48 88       	ldd	r4, Y+16	; 0x10
    3924:	5f 84       	ldd	r5, Y+15	; 0x0f
    3926:	6e 84       	ldd	r6, Y+14	; 0x0e
    3928:	7d 84       	ldd	r7, Y+13	; 0x0d
    392a:	8c 84       	ldd	r8, Y+12	; 0x0c
    392c:	9b 84       	ldd	r9, Y+11	; 0x0b
    392e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3930:	b9 84       	ldd	r11, Y+9	; 0x09
    3932:	c8 84       	ldd	r12, Y+8	; 0x08
    3934:	df 80       	ldd	r13, Y+7	; 0x07
    3936:	ee 80       	ldd	r14, Y+6	; 0x06
    3938:	fd 80       	ldd	r15, Y+5	; 0x05
    393a:	0c 81       	ldd	r16, Y+4	; 0x04
    393c:	1b 81       	ldd	r17, Y+3	; 0x03
    393e:	aa 81       	ldd	r26, Y+2	; 0x02
    3940:	b9 81       	ldd	r27, Y+1	; 0x01
    3942:	ce 0f       	add	r28, r30
    3944:	d1 1d       	adc	r29, r1
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	ed 01       	movw	r28, r26
    3952:	08 95       	ret

00003954 <_exit>:
    3954:	f8 94       	cli

00003956 <__stop_program>:
    3956:	ff cf       	rjmp	.-2      	; 0x3956 <__stop_program>
